#![allow(non_snake_case)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(clippy::comparison_chain)]
#![allow(clippy::nonminimal_bool)]
#![allow(clippy::neg_multiply)]
#![allow(clippy::type_complexity)]
#![allow(clippy::needless_range_loop)]
#![allow(dead_code)]

use std::{
    cmp::Reverse,
    collections::{BinaryHeap, HashMap, VecDeque},
};

use itertools::Itertools;
use proconio::{fastout, input, marker::Chars};
use rand::prelude::*;
use rustc_hash::{FxHashMap, FxHashSet};

// Potential
// t=0: 6984586
// t=1: 8534380
// t=2: 9111393
// t=3: 7862334
// t=4: 7487920
// t=5: 8531081
// t=6: 7125290
// t=7: 11006891
// t=8: 8358407
// t=9: 8193528
// t=10: 9563830
// t=11: 10777092
// t=12: 14379281
// t=13: 12304344
// t=14: 13456258
// t=15: 18649788
// t=16: 11187181
// t=17: 14509145
// t=18: 12781668
// t=19: 13259406
const PRE: [&str; 20] = ["47 46 45 44 100 99 98 95 93 97 48 49 50 51 77 81 84 86 89 96 59 56 53 54 76 79 82 85 87 94 60 57 55 58 73 75 78 83 88 92 43 42 41 63 68 72 74 80 90 91 40 39 38 61 64 67 70 71 2 1 37 36 35 52 62 65 66 69 4 3 33 32 31 34 23 19 16 11 7 5 30 29 27 25 21 18 15 12 9 6 28 26 24 22 20 17 14 13 10 8",
"91 89 88 85 5 6 7 8 10 9 92 90 87 86 4 3 2 17 12 11 94 93 66 84 83 82 1 18 13 14 96 95 67 76 80 81 20 19 16 15 100 97 68 72 79 78 27 21 22 23 99 98 65 73 75 77 28 25 26 24 63 64 62 71 74 40 32 30 29 31 61 60 59 70 69 39 37 38 34 33 58 57 56 55 52 49 41 43 45 35 50 51 53 54 48 47 44 42 46 36",
"78 80 82 84 87 90 89 86 77 76 75 73 71 69 36 79 81 83 85 88 92 93 91 74 72 70 68 67 65 37 151 148 147 101 99 96 95 94 66 64 63 62 61 60 38 150 146 144 105 103 
100 98 97 59 58 57 56 55 54 39 149 143 141 110 108 106 104 102 50 51 53 52 49 46 41 152 137 132 121 114 111 109 107 42 43 47 48 45 44 40 154 133 131 130 116 115 113 112 33 30 22 19 20 28 35 155 136 135 134 120 119 118 117 23 21 18 16 14 32 34 156 138 140 139 125 124 123 122 17 15 13 11 9 29 31 157 153 145 142 129 128 127 126 12 10 8 5 3 26 27 159 158 160 163 183 182 178 177 7 6 4 2 1 24 25 161 162 164 167 184 186 190 194 198 202 206 210 214 224 225 165 166 168 173 180 187 
191 195 199 203 207 211 215 222 223 169 170 171 175 181 188 192 196 200 204 208 212 216 219 221 172 174 176 179 185 189 193 197 201 205 209 213 217 218 220",
"1 4 9 18 32 48 63 78 110 126 134 141 152 161 166 171 2 5 11 19 33 47 60 66 125 129 136 144 156 164 170 174 3 7 13 21 34 46 57 62 130 132 139 149 159 169 176 180 6 8 14 23 35 45 55 61 135 137 143 154 163 173 181 183 10 12 17 26 36 44 53 59 138 140 148 158 168 178 185 187 15 16 20 28 37 43 51 56 142 145 153 162 172 182 188 190 25 22 24 30 38 42 50 54 147 151 157 165 175 184 189 193 40 29 27 31 39 41 49 52 150 155 160 167 177 186 192 198 58 65 71 80 91 97 102 107 204 208 216 
218 226 230 228 217 64 67 73 82 92 100 106 111 203 207 215 219 227 233 235 232 68 69 75 85 95 104 112 116 201 206 214 220 229 237 241 242 70 72 79 89 99 109 117 119 199 205 213 221 231 240 245 247 74 76 84 94 103 114 120 122 196 202 212 222 234 243 249 251 77 81 88 98 108 118 124 127 195 200 211 223 236 244 250 254 83 87 93 101 113 121 128 133 191 197 210 224 238 246 252 255 86 90 96 105 115 123 131 146 179 194 209 225 239 248 253 256",

272 282 300 312 318 319 320 76 80 88 104 118 133 150 169 203 212 246 256 283 291 326 321 325 327 324 79 83 92 107 119 131 147 187 205 221 245 269 286 296 330 333 334 331 361 82 85 93 116 122 154 162 186 213 277 284 285 295 307 328 337 342 350 357 87 90 94 121 127 145 176 183 240 267 290 292 299 305 336 338 347 352 356 89 91 98 109 125 159 174 181 273 279 293 306 329 335 339 341 348 354 358 96 97 99 130 142 161 175 189 268 275 303 316 322 344 343 346 349 353 360 95 108 112 
120 155 168 190 210 252 276 298 314 323 332 340 345 351 355 359",
"1 23 24 65 67 68 73 84 92 98 105 112 118 124 129 131 123 117 114 111 2 26 27 61 66 69 75 86 93 99 107 115 121 127 135 145 169 205 219 225 3 29 30 56 63 70 78 88 94 102 113 119 126 132 141 148 158 223 227 228 8 28 32 44 62 72 82 90 96 100 125 128 134 140 146 151 157 237 235 230 16 22 25 31 71 79 89 95 101 103 136 138 
143 149 155 161 164 248 243 245 17 18 19 20 80 87 97 104 109 110 144 147 153 162 166 170 174 265 273 276 15 13 12 11 85 91 108 116 120 122 154 159 167 176 179 
181 183 270 274 275 14 9 7 6 81 83 130 133 137 139 163 165 184 188 190 194 196 269 271 272 21 10 5 4 76 77 150 152 156 160 168 171 199 202 206 212 216 263 266 
267 38 47 54 57 298 297 172 173 175 177 178 180 211 214 218 224 234 252 260 264 45 51 55 60 295 293 192 191 189 186 185 187 215 221 226 232 240 249 257 261 49 
53 58 64 291 289 220 217 209 195 193 197 208 229 233 239 244 250 255 258 48 52 59 74 286 277 253 241 231 198 200 204 210 236 238 242 246 251 254 256 43 46 50 106 284 279 268 259 247 201 203 207 213 400 399 397 392 393 396 398 40 41 42 142 282 283 280 281 290 335 339 344 348 363 367 374 384 389 394 395 36 37 39 182 278 285 288 292 296 334 338 343 346 360 365 371 380 386 390 391 33 34 35 222 262 287 294 299 302 331 336 342 347 357 362 368 376 382 387 388 327 322 318 314 308 
300 301 305 312 325 333 341 349 355 359 366 372 377 383 385 328 323 319 315 309 303 304 310 317 326 332 340 350 354 358 364 369 373 379 381 329 324 320 316 311 306 307 313 321 330 337 345 351 352 353 356 361 370 375 378",


378 372 366 359 353 346 338 329 320 310 302 291 280 271 268 398 396 394 392 388 384 379 373 367 360 352 345 336 328 319 311 303 292 282 278 400 399 397 395 391 387 381 376 370 364 355 348 339 331 323 314 306 296 289 283",



341 343 284 280 270 258 246 233 223 219 218 220 229 248 268 294 320 332 338 342 344 345 290 286 276 265 253 241 231 225 222 393 389 385 379 369 351 347 346 348 349 350 296 292 283 272 259 250 239 232 228 395 392 387 381 374 364 358 355 354 353 352 300 297 289 278 267 257 247 238 235 398 394 388 383 377 371 367 363 360 357 356 302 299 293 282 271 260 252 244 240 399 396 390 384 380 376 373 370 366 361 359 303 301 295 285 274 264 256 249 243 400 397 391 386 382 378 375 372 368 365 362",






470 480 488 661 669 678 688 697 709 718 723 726 185 190 198 206 213 221 228 236 241 426 430 437 445 453 461 468 477 481 671 675 683 691 701 712 720 725 728 188 193 201 208 214 222 227 235 240 429 433 439 446 454 462 467 476 478 674 679 685 693 704 714 722 727 729",
"84 83 82 81 79 78 77 86 91 95 105 110 114 119 123 218 220 223 229 234 239 243 247 251 253 133 134 136 140 142 50 55 60 64 69 73 75 87 93 97 103 109 115 121 125 219 222 227 233 236 241 245 250 255 256 137 139 141 144 146 48 52 58 61 66 70 74 88 94 98 104 112 117 124 127 221 225 231 237 244 248 252 257 259 260 143 145 




775 771 767 761 747 743 347 348 351 355 365 366 364 360 900 897 895 893 868 866 864 862 860 853 843 825 809 802 795 791 785 781 778 784 800 808 863 870 874 876 878 880 882 884 886 887 889 892 872 871 869 865 861 854 844 827 811 803 798 794 790 788 787 793 804 821 852 867 873 875 877 879 881 883 885 888 890 891",
"3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 64 67 70 73 76 79 82 84 87 2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 
77 80 83 85 88 1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 66 69 72 75 78 81 86 89 90 321 322 324 327 330 331 334 337 340 343 346 349 352 355 358 361 364 367 370 373 376 379 382 385 388 390 393 91 92 93 318 319 323 326 329 332 335 338 341 344 347 350 353 356 359 362 365 368 371 374 377 380 383 386 389 392 394 94 95 96 316 317 320 325 328 333 336 339 342 345 348 351 354 357 360 363 366 369 372 375 378 381 384 387 391 395 397 97 98 99 313 314 315 573 574 576 




214 211 208 205 202 199 198 195 192 189 185 181 178 175 172 167 164 163 251 248 245 242 239 236 233 230 227 224 221 218 215 212 209 206 203 200 197 194 191 188 186 183 179 176 173 170 166 165 249 246 244 243 240 237 234 231 228 225 222 219 216 213 210 207 204 201 196 193 190 187 184 182 180 177 174 171 169 168",
"76 75 71 69 417 415 413 408 404 403 401 398 395 393 337 339 359 360 687 684 682 680 615 612 609 604 597 594 592 589 78 77 72 70 418 416 412 406 402 399 400 397 396 392 341 342 358 361 686 683 679 678 616 614 613 608 596 593 591 590 82 81 422 421 420 419 411 407 394 391 386 380 373 369 345 349 357 364 372 377 674 670 
662 660 622 620 588 587 584 580 83 84 423 424 425 426 409 405 390 388 385 379 368 363 350 354 362 367 374 378 671 667 661 659 632 629 586 585 583 579 87 88 89 
90 430 433 440 443 320 321 384 381 356 355 352 353 370 371 675 672 669 666 658 654 643 637 635 631 628 627 94 93 92 91 432 436 442 444 319 322 383 382 346 347 
348 351 376 375 676 673 668 665 657 653 646 642 636 630 626 625 97 98 99 100 434 435 315 316 318 323 327 334 338 340 554 551 548 545 540 534 530 529 638 640 644 647 651 655 624 623 101 102 103 104 437 438 313 314 317 324 328 333 335 336 555 553 550 546 539 533 527 526 639 641 645 648 652 656 618 617 109 110 107 108 312 310 309 307 302 301 330 332 485 487 489 492 495 498 499 502 514 519 522 528 532 538 542 544 610 611 113 114 111 112 311 308 306 304 299 298 329 331 486 488 

536 549 556 571 574 619 621 122 127 139 143 157 159 160 163 297 303 325 343 365 387 410 428 446 456 469 483 501 512 523 535 547 552 569 570 633 634 115 116 154 156 162 165 169 171 284 285 208 209 232 229 227 225 450 454 504 505 507 510 720 719 702 699 696 694 650 649 105 106 164 166 167 168 170 172 269 271 212 214 233 231 228 226 451 453 503 506 508 511 718 715 703 701 697 695 664 663 95 96 173 174 177 178 253 254 257 258 217 221 230 234 236 240 244 247 731 728 727 723 717 713 709 705 700 693 681 677 86 85 175 176 179 180 252 250 242 241 220 223 235 238 237 239 243 246 732 730 726 722 716 712 708 706 704 698 688 685 80 79 58 55 

809 808 787 781 768 761 756 754 752 751 13 15 18 23 33 38 40 39 21 20 890 889 887 885 883 882 880 879 857 858 861 862 790 788 767 766 770 776 777 779 14 16 17 
19 29 35 37 36 24 22 892 891 888 886 884 881 878 877 864 863 860 859 792 791 763 765 769 775 778 780 5 8 12 11 6 2 34 32 27 25 893 895 897 900 876 874 873 870 
867 865 856 855 795 794 760 762 771 774 783 784 4 7 10 9 3 1 31 30 28 26 894 896 898 899 875 872 871 869 868 866 854 853 797 796 758 759 772 773 785 786",
"79 80 78 76 1158 1156 1155 1153 1157 1108 1106 1104 1103 1170 1169 1182 1185 1184 1190 1192 1193 1198 1199 1225 1224 1222 1220 1221 1223 704 707 710 702 698 697 96 82 81 1145 1144 1146 1150 1151 1154 1111 1120 1121 1176 1172 1168 1181 1180 1183 1186 1194 1196 1197 1201 1206 1207 1216 1218 1219 703 705 706 709 708 696 695 95 84 89 90 1142 1136 1149 1147 1148 1114 1118 1122 1178 1177 1161 1166 1174 1188 1189 1191 1195 1200 1202 1208 1211 1214 1213 1212 720 719 718 713 712 714 694 93 88 87 85 1141 1138 1137 1140 1112 1113 1116 1126 1179 1143 1152 1163 1160 1187 1046 1050 1049 1203 1204 1205 1217 1215 1210 1209 741 723 724 729 715 716 692 94 91 86 119 1139 124 1135 1131 1128 1125 1115 1127 1130 1134 1162 1164 1159 1036 1047 1048 1052 1057 1056 1055 1053 770 769 768 742 744 732 730 739 717 691 98 97 122 120 127 125 128 1132 1133 1123 1119 1117 1124 1129 1175 1167 1165 1037 1039 1045 1044 1063 1058 1054 774 773 767 754 755 745 737 738 740 689 690 104 107 121 126 131 132 130 129 1098 1105 1107 1109 1110 1073 1173 1171 1059 1035 1038 1041 1043 1069 1071 1070 1068 775 765 764 762 761 733 734 743 746 747 103 114 117 154 137 134 135 136 1099 1100 1101 1102 1081 1072 1062 1061 1060 1029 1034 1040 1074 1075 1078 1080 1067 1066 1065 1064 766 763 731 752 751 750 759 
102 101 150 152 145 1027 1026 1025 1028 1032 1094 1095 1088 1089 1051 1042 1033 1023 1006 989 974 1076 1077 1079 1082 900 783 784 771 776 727 726 725 753 757 158 159 148 161 1024 1022 1020 1021 1030 1031 1097 1096 1087 1091 1093 926 927 934 942 948 955 931 929 896 897 899 898 785 786 781 728 891 884 756 758 157 160 167 169 203 1018 1019 1017 1016 1015 1013 1014 1086 1090 1092 925 924 941 943 947 945 933 907 895 892 789 790 787 791 793 800 889 886 883 882 153 165 176 178 205 207 209 208 1011 1010 1009 1012 1085 1084 1083 921 922 920 953 951 952 923 906 890 888 788 792 796 794 798 802 801 887 878 880 151 173 175 186 196 206 210 246 1007 1008 1005 1004 966 965 964 961 963 919 954 956 777 914 904 893 881 827 819 799 797 810 804 873 872 875 879 184 180 177 179 181 216 211 245 271 272 1000 
1003 967 968 960 959 962 946 949 778 779 780 839 836 862 832 811 805 824 817 803 861 866 874 877 187 194 174 172 170 226 236 244 277 274 993 1002 975 971 958 957 950 944 940 937 936 782 795 833 843 838 834 835 830 837 850 857 865 871 870 191 195 197 199 198 259 260 252 278 276 987 981 977 976 973 932 935 939 938 699 
700 772 807 820 821 826 831 828 829 842 851 854 864 868 869 192 202 200 381 384 268 269 281 280 279 985 980 969 970 972 930 928 688 687 693 701 760 748 749 815 825 814 813 848 847 856 855 852 863 860 190 189 201 380 383 371 372 293 283 282 983 982 986 988 990 995 996 1001 685 686 711 722 735 736 812 822 818 587 586 845 867 876 853 858 859 188 375 376 378 374 370 368 306 284 285 978 979 984 291 991 994 997 999 681 678 655 721 806 808 809 823 816 588 589 903 894 885 849 846 


581 583 105 110 35 36 39 46 69 43 47 303 302 482 484 483 490 495 502 507 519 515 514 263 238 217 218 221 227 215 214 212 572 573 123 118 113 106 108 73 74 56 52 68 50 48 299 301 481 491 486 488 498 501 509 516 517 523 233 235 234 229 224 225 204 193 213 162 155 133 138 112 99 92 72 65 58 55 66 51 49 298 300 492 494 487 489 506 505 508 513 518 521 231 237 239 240 223 185 183 182 171 163 156 139 140 141 100 83 77 63 62 59 64 53 54 297 296 493 497 499 500 503 504 510 511 520 
228 230 232 242 241 222 220 219 166 168 164 149 144 142 143 146 147 75 61 60 57 67 70 71",
"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 
64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 160 159 158 157 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141 140 139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 
187 188 189 190 191 192 193 194 195 196 197 198 199 200 240 239 238 237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220 219 218 217 216 215 214 213 212 211 210 209 208 207 206 205 204 203 202 201 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 320 319 318 317 316 315 314 313 312 311 310 309 308 307 306 305 304 303 302 301 300 299 298 297 296 295 294 293 292 291 290 289 288 287 286 285 284 283 282 281 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 
346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 400 399 398 397 396 395 394 393 392 391 390 389 388 387 386 385 384 383 382 381 380 379 378 377 376 375 374 373 372 371 370 369 368 367 366 365 364 363 362 361 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 480 479 478 477 476 475 474 473 472 471 470 469 468 467 466 465 464 463 462 461 460 459 458 457 456 455 454 453 452 451 450 449 448 447 446 445 444 443 442 441 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 



982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1040 1039 1038 1037 1036 1035 1034 1033 1032 1031 1030 1029 1028 1027 1026 1025 1024 1023 1022 1021 1020 1019 1018 1017 1016 1015 1014 1013 1012 1011 1010 1009 1008 1007 1006 1005 1004 1003 1002 1001 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 
1120 1119 1118 1117 1116 1115 1114 1113 1112 1111 1110 1109 1108 1107 1106 1105 1104 1103 1102 1101 1100 1099 1098 1097 1096 1095 1094 1093 1092 1091 1090 1089 1088 1087 1086 1085 1084 1083 1082 1081 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1200 1199 1198 1197 1196 1195 1194 1193 1192 1191 1190 1189 1188 1187 1186 1185 1184 1183 1182 1181 1180 1179 1178 1177 1176 1175 1174 1173 1172 1171 1170 1169 1168 1167 1166 1165 1164 1163 1162 1161 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 
1240 1280 1279 1278 1277 1276 1275 1274 1273 1272 1271 1270 1269 1268 1267 1266 1265 1264 1263 1262 1261 1260 1259 1258 1257 1256 1255 1254 1253 1252 1251 1250 1249 1248 1247 1246 1245 1244 1243 1242 1241 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1360 1359 1358 1357 1356 1355 1354 1353 1352 1351 1350 1349 1348 1347 1346 1345 1344 1343 1342 1341 1340 1339 1338 1337 1336 1335 1334 1333 1332 1331 1330 1329 1328 1327 1326 1325 1324 1323 1322 1321 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 
1399 1400 1440 1439 1438 1437 1436 1435 1434 1433 1432 1431 1430 1429 1428 1427 1426 1425 1424 1423 1422 1421 1420 1419 1418 1417 1416 1415 1414 1413 1412 1411 1410 1409 1408 1407 1406 1405 1404 1403 1402 1401 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1520 1519 1518 1517 1516 1515 1514 1513 1512 1511 1510 1509 1508 1507 1506 1505 1504 1503 1502 1501 1500 1499 1498 1497 1496 1495 1494 1493 1492 1491 1490 1489 1488 1487 1486 1485 1484 1483 1482 1481 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 
1558 1559 1560 1600 1599 1598 1597 1596 1595 1594 1593 1592 1591 1590 1589 1588 1587 1586 1585 1584 1583 1582 1581 1580 1579 1578 1577 1576 1575 1574 1573 1572 1571 1570 1569 1568 1567 1566 1565 1564 1563 1562 1561",
"1495 1490 1487 1483 1482 1475 1432 1416 1391 1362 1334 1302 1271 1246 1221 1198 1166 1136 1105 1078 1056 1033 1019 1005 996 988 983 984 993 1002 1009 1014 1021 1025 1030 1037 1039 1193 1195 1196 1498 1492 1488 1484 1478 1466 1443 1420 1395 1364 1336 1304 1275 1249 1223 1199 1167 1135 1103 1074 1052 1029 1013 1001 990 981 976 978 989 1000 1008 1015 1022 1027 1035 1041 1043 1189 1191 1192 1499 1497 1491 1486 1479 1465 1446 1424 1398 1368 1342 1308 1278 1251 1226 1202 1169 1137 1102 1069 1044 1023 1007 992 979 971 969 972 982 994 1006 1017 1024 1032 1042 1049 1053 1182 1183 1184 1503 1501 1496 1489 1481 1467 1447 1426 1403 1373 1345 1312 1280 1254 1229 1204 1173 1139 1099 1061 1031 1012 995 980 968 962 960 965 973 987 1003 1018 1028 1040 1051 1057 1060 1174 1175 1177 1506 1504 1500 1494 
1485 1470 1449 1428 1406 1376 1349 1316 1286 1258 1231 1206 1176 1142 1101 1045 1016 997 977 967 958 952 951 957 964 975 998 1020 1036 1050 1058 1063 1065 1162 1164 1165 1508 1507 1505 1502 1493 1473 1450 1429 1407 1377 1350 1317 1288 1259 1233 1208 1178 1145 1123 1004 991 974 961 954 948 943 942 946 953 966 986 1026 1046 1059 1068 1073 1076 1154 1155 1157 1513 1511 1510 1509 1512 1527 1542 1553 1558 1564 1567 1572 1576 1580 1581 1585 1590 1593 1597 970 963 955 947 939 935 932 933 936 940 949 956 1054 1062 1071 1081 1090 1094 1146 1149 1152 1517 1516 1514 1515 1520 1531 1545 1554 1557 1563 1568 1571 1575 1579 1582 1586 1589 1594 1598 944 941 937 931 928 925 921 923 927 929 930 934 1072 1079 1089 1098 1108 1121 1141 1148 1151 1522 1521 1519 1518 1528 1534 1547 1555 1559 1561 1566 1570 
1574 1578 1583 1587 1591 1595 1599 926 924 922 918 914 912 910 911 913 915 917 919 1088 1095 1104 1116 1128 1138 1147 1156 1159 1526 1525 1524 1523 1530 1538 1550 1556 1560 1562 1565 1569 1573 1577 1584 1588 1592 1596 1600 909 907 906 902 900 897 896 898 899 901 903 904 1097 1110 1122 1134 1143 1153 1161 1168 1172 1529 1533 1535 1537 180 181 183 188 194 201 212 223 239 264 287 305 315 323 327 893 892 889 886 885 882 883 884 887 888 891 890 1096 1126 1140 1150 1160 1170 1180 1185 1187 1532 1536 1539 1541 179 178 185 190 196 202 213 225 242 267 291 308 320 329 332 878 877 875 873 871 869 870 872 876 879 881 880 1066 1158 1163 1171 1181 1190 1197 1201 1203 1540 1543 1546 1549 174 175 186 191 199 203 214 229 246 272 296 318 331 341 346 861 859 858 856 855 854 857 860 862 864 865 866 1038 
1186 1188 1194 1200 1205 1210 1214 1216 1544 1548 1551 1552 171 172 187 192 198 204 215 230 248 275 303 338 351 358 362 842 841 844 843 845 846 847 848 849 850 851 852 1011 1207 1209 1211 1215 1217 1219 1222 1225 5 6 8 11 31 30 357 361 366 374 387 400 410 411 399 380 377 382 385 823 824 825 827 829 831 833 835 836 838 839 840 985 1218 1220 1224 1227 1228 1230 1232 1236 9 10 12 14 35 33 353 359 367 376 389 401 414 417 412 404 402 405 407 806 808 809 812 814 817 819 820 821 
822 826 828 959 1234 1235 1237 1238 1240 1241 1242 1244 15 16 17 18 38 39 344 356 368 379 390 406 419 423 424 422 426 428 429 785 788 790 794 799 803 807 810 811 813 815 816 938 1247 1248 1250 1252 1253 1255 1256 1257 20 21 22 23 42 44 326 355 369 384 397 415 425 433 436 439 444 450 453 759 761 766 772 781 787 793 798 800 802 804 805 916 1261 1263 1265 1266 1268 1269 1270 1272 25 26 27 28 46 47 281 365 375 388 403 420 432 441 448 452 457 467 472 729 734 742 750 758 767 775 784 786 789 791 792 894 1277 1279 1282 1285 1290 1292 1293 1294 32 34 36 37 50 53 234 372 381 392 408 421 435 447 455 461 469 489 505 694 708 722 732 740 749 

508 523 536 549 562 578 593 610 623 637 655 671 684 692 1323 1328 1338 1356 1372 1392 1414 1427 1435 1440 1442 40 115 116 117 118 119 120 256 262 266 270 273 277 280 499 509 524 534 546 560 576 590 606 618 634 650 667 680 688 1314 1319 1330 1344 1359 1380 1417 1434 1439 1441 1444 29 121 122 123 124 125 126 238 244 249 254 260 265 269 495 504 519 530 542 557 573 586 601 614 628 645 661 675 681 1300 1305 1313 1325 1337 1348 1437 1445 1452 1456 1458 24 127 128 129 130 131 132 227 231 237 241 250 255 261 490 497 511 526 539 553 571 582 596 612 625 640 656 669 676 1283 1287 1295 1306 1315 1322 1448 1451 1454 1460 1463 19 133 134 135 
136 137 138 217 221 228 235 243 253 258 481 488 502 522 538 552 568 581 594 609 622 635 651 664 670 1262 1267 1276 1289 1296 1301 1453 1455 1461 1468 1471 13 139 140 141 142 143 144 211 216 222 232 245 257 263 471 480 494 516 533 548 563 579 592 607 619 633 648 660 666 1239 1243 1260 1273 1284 1291 1457 1462 1469 1474 1477 7 145 146 147 149 152 153 205 210 218 233 251 268 276 462 470 487 510 529 545 561 577 591 604 617 632 646 658 665 1212 1213 1245 1264 1274 1281 1459 1464 1472 1476 1480 4 150 151 154 157 160 164 200 208 219 236 259 283 299 445 460 482 507 527 543 559 574 589 602 616 630 644 657 663 1179 1144 1106 1093 1091 1092 1113 1115 1120 1129 1133 3 155 156 159 163 169 177 193 206 220 240 271 301 339 409 449 478 513 554 599 642 686 721 753 795 830 863 895 920 1047 1080 1083 1082 1085 1087 1111 1114 1119 1127 1132 2 158 162 166 168 173 182 195 207 224 247 278 311 350 398 442 476 515 555 598 639 683 719 754 796 832 867 905 945 1010 1048 1064 1070 1077 1084 1107 1112 1118 1125 1131 1 161 165 167 170 176 184 197 209 226 252 285 316 354 396 438 473 514 556 597 638 682 720 755 797 834 868 908 950 999 1034 1055 1067 1075 1086 1100 1109 1117 1124 1130",
"107 110 114 118 109 108 69 59 56 48 43 18 13 10 9 6 3 424 423 420 421 422 1368 1370 1381 1379 1399 1403 1407 1430 1429 1433 1437 1431 1365 1363 1358 1342 1336 
1337 2491 2492 2496 2439 2441 2436 2416 2410 2411 2399 104 105 119 117 111 76 70 64 60 42 41 17 15 16 8 4 2 428 426 425 418 458 455 1373 1380 1391 1395 1392 1410 1423 1425 1426 1427 1428 1369 1355 1356 1345 1344 1340 2490 2494 2495 2437 2440 2433 2418 2407 2405 2401 103 101 81 115 113 83 77 72 61 37 29 23 548 14 7 5 
1 431 435 434 433 457 456 1372 1386 1388 1387 1418 1416 1419 1421 1420 1422 1385 1376 1377 1351 1348 1349 2487 2488 2497 2459 2452 2445 2423 2415 2409 2404 2403 102 82 84 68 97 95 75 73 134 554 553 551 547 12 11 524 527 526 437 436 432 430 453 450 471 469 462 1468 1415 1414 1417 1412 1405 1394 1371 2226 2228 2224 2220 2484 2485 2482 2464 2449 2448 2450 2360 2398 2400 2402 99 89 87 71 96 106 116 138 135 556 552 540 545 546 521 522 529 525 491 441 444 447 454 464 463 467 465 1466 1464 1483 1482 1413 1406 1361 1366 2223 2222 2225 2221 2483 2486 2477 2474 2481 2446 2447 2357 2389 2391 2395 98 93 86 74 90 129 128 139 137 557 536 537 
544 538 523 519 518 507 494 498 500 449 460 459 461 466 1451 1460 1462 1463 1479 1480 1408 1357 1362 1364 2218 2229 2499 2500 2489 2473 2475 2478 2480 2356 2355 2376 2394 2393 92 94 80 79 85 177 166 152 153 555 535 533 543 541 530 520 511 504 493 483 479 474 468 475 1447 1448 1450 1454 1461 1481 1478 1477 1475 1350 1352 1353 1325 2234 2237 2498 2493 2472 2476 2479 2317 2316 2353 2364 2365 2344 91 140 143 144 188 189 203 200 202 205 534 562 550 549 532 531 513 514 512 510 477 480 478 476 473 1446 1452 1453 1456 1457 1472 1471 1339 1341 1331 1329 1327 2235 2243 2251 2263 2265 2285 2288 2318 2308 2341 2343 2345 2346 145 150 148 147 217 219 218 227 234 243 252 563 571 560 558 528 516 515 613 482 481 484 486 487 1441 1445 1444 1449 1455 1465 1470 1469 1338 1333 1332 1330 1326 1324 2247 2254 2261 2262 2281 2286 2296 2303 2330 2329 2209 2206 146 151 154 157 215 249 221 244 240 238 261 565 570 572 585 599 609 610 611 607 490 488 489 485 1442 1443 1440 1439 1375 1367 1360 1354 1343 1320 1335 1328 1225 1227 2270 2268 2266 2271 2276 2287 2289 2306 2319 2283 2211 2207 142 156 158 165 161 247 245 241 237 236 
270 277 278 630 629 628 617 616 501 499 496 503 506 509 1434 1432 1438 1390 1378 1310 1314 1311 1304 1306 1293 1277 1278 1232 1238 1239 2264 2272 2277 2274 2290 2295 2280 2282 2210 2208 141 155 159 160 163 246 248 239 233 235 285 284 287 307 310 627 626 505 502 497 495 757 508 826 825 1424 1411 1389 1383 1308 1312 1309 1271 1270 1279 1272 1260 1249 1244 2258 2260 2279 2278 2273 2292 2294 2269 2240 2215 2213 181 179 180 172 168 251 254 255 257 256 259 293 305 306 309 625 635 643 682 705 732 759 790 823 824 1401 1400 1393 1382 1302 1315 1316 1268 1269 1276 1256 1261 1246 1144 1140 1136 1139 1138 1137 2293 2255 2257 2242 2214 2212 
183 178 187 169 170 250 258 262 260 273 276 297 301 304 664 663 634 651 656 701 734 755 885 856 1396 1397 1398 1294 1295 1298 1274 1273 1267 1262 1254 1248 1243 1245 1143 1129 1130 1141 1142 1135 2165 2256 2253 2230 2217 2219 213 176 192 191 283 279 275 266 264 269 280 296 300 302 667 662 660 657 638 700 752 756 913 
909 905 1118 1119 1121 1292 1288 1283 1275 1264 1263 1258 1247 1237 1224 1153 1148 1147 1146 1145 1134 2162 2252 2250 2198 2204 2190 214 175 198 207 282 210 268 267 265 274 271 288 303 689 674 690 623 622 619 620 751 470 948 1046 1080 1112 1116 1120 1281 1285 1289 1266 1259 1251 1253 1252 1229 1223 1152 1150 1149 1151 1155 2164 2161 2158 2249 2196 2195 2192 216 211 204 206 209 212 242 253 263 272 281 286 291 685 683 688 624 591 592 517 492 472 980 1013 1131 1133 1157 1123 
1124 1297 1296 1265 1242 1241 1240 1250 1213 1216 1202 1200 1201 1171 1163 2168 2166 2153 2169 2179 2188 2149 222 224 223 201 232 231 230 58 57 55 52 50 294 299 298 401 404 568 567 542 451 452 445 448 446 1128 1185 1186 1126 1299 1300 1228 1230 1234 1236 1207 1209 1206 1204 1194 1188 1180 2171 2170 2150 2151 2159 2191 2189 2148 226 225 194 195 193 208 220 54 62 53 51 49 292 308 295 403 402 396 566 539 443 442 438 439 1212 1211 1210 1235 1321 1319 1305 1303 1226 1233 1614 1615 1617 1203 1205 1192 1190 1193 2128 2172 2173 2141 2154 2152 2146 2147 748 228 229 190 196 197 199 65 67 78 47 46 289 311 312 405 398 394 389 390 416 427 429 440 1214 1291 1290 1257 1318 1317 1313 1220 1222 1221 1613 1616 1618 1198 1195 1191 1189 1196 2129 2134 2136 2138 2125 2121 2144 2145 749 754 758 185 182 186 173 63 66 88 31 39 290 318 327 346 397 399 383 381 406 417 419 415 1215 1219 1287 1282 1301 1322 1323 1608 1607 1610 1609 1598 1199 1197 1167 1182 1187 2132 2131 2073 2135 2133 2127 2117 2114 2113 747 770 765 766 174 184 162 149 112 100 32 33 28 320 334 344 355 365 378 384 395 392 413 414 1217 1218 1286 1284 1374 1347 1346 1605 1604 1602 1603 1601 1599 1166 1168 1175 1173 1169 2068 2070 2085 2126 2123 2118 2119 2110 763 767 768 764 171 167 164 136 123 120 38 36 22 21 335 
333 359 361 362 375 373 372 408 407 410 411 412 1520 1402 1435 1489 1488 1595 1594 1593 1597 1600 1165 1164 1174 1172 1170 2065 2063 2084 2086 2100 2111 2122 2112 762 778 772 809 822 830 126 127 125 130 132 34 19 20 332 336 340 357 363 368 371 376 409 400 388 1518 1517 1519 1404 1467 1490 1510 1532 1592 1591 1596 1588 1181 1179 1178 1176 1177 2046 2064 2081 2090 2099 2106 2120 2116 783 785 796 807 815 837 122 121 124 131 133 35 30 24 329 339 343 351 366 367 369 377 379 393 391 1513 1516 1485 1484 1476 1514 1512 1552 1570 1589 1587 1586 1582 1579 1578 1574 2033 2032 2018 2079 2095 2097 2101 2103 2102 949 944 946 904 841 843 840 838 864 45 44 40 27 25 331 337 1127 1125 370 360 364 380 382 387 1511 1509 1496 1494 1491 1474 1473 1681 1554 1571 1611 1612 1585 1584 1580 2039 2038 2037 2014 
2016 2020 2055 2054 2044 2105 2107 947 945 899 900 846 852 867 866 865 1106 1105 1103 26 1090 1067 1069 1077 1122 374 358 354 356 385 386 1505 1506 1501 1503 1495 1497 1492 1680 1679 1675 1633 1657 1659 1816 1839 2035 2036 1918 1997 1994 2050 2051 2053 2045 2104 2109 935 942 932 902 903 901 884 870 923 1114 1113 1102 1098 1091 1089 1072 1076 1117 1109 350 348 352 319 316 1507 1504 1502 1500 1499 1498 1493 1682 1677 1676 1653 1654 1771 1795 1858 1879 1900 1921 1984 1975 1977 2058 2056 2059 2075 2074 936 937 931 925 920 918 928 924 922 1115 1108 1104 1107 1111 1086 1081 1079 1088 1099 349 338 353 322 314 1515 1521 1533 1569 1567 1870 1869 1684 1868 1673 1672 1752 1749 1792 1897 1898 1899 1943 1969 1974 1972 2043 2057 2061 2069 2077 559 934 933 966 962 959 943 960 921 1097 1096 1095 1093 1092 1082 1084 1083 1100 1101 347 330 328 324 1525 1526 1528 1534 1568 1566 1873 1875 1876 1871 1884 1690 1709 1728 1734 1896 1990 1989 1992 1986 1980 1979 2048 2052 2066 2071 2076 561 929 930 577 575 954 953 961 1012 1011 1015 1085 1094 1066 1078 1074 1047 1062 1059 345 326 323 325 1524 1527 1529 1536 1548 1564 1883 1878 1877 1881 1886 1689 1711 1729 1731 2015 1991 1995 2001 2005 2012 2019 2047 2060 2067 2080 2078 564 573 579 578 576 952 973 969 972 1010 1014 1075 1073 1064 1058 1054 1050 1049 1055 342 317 321 1522 1523 1531 1530 1541 1546 1561 1888 1895 1882 1885 1890 1923 1924 1925 1730 2013 1993 2007 2004 2002 1998 2026 2049 2062 2072 2088 2087 569 574 581 582 580 951 975 974 997 1002 1018 1070 1061 1063 1060 1056 1048 1051 1053 341 315 313 1562 1560 1558 1550 1544 1551 1555 1891 1892 1902 1889 1893 1915 1922 1927 2010 2011 2009 2006 2008 2017 1999 2034 2041 2040 2082 2089 2091 589 587 586 583 632 633 978 979 995 1022 1019 1016 1052 1043 1033 1057 1280 1307 1384 1409 1436 1487 1563 1557 1553 1549 1543 1867 1872 1887 1894 1901 1904 1910 1913 1928 1929 1930 1926 2031 2028 2025 2021 2000 2003 2156 2042 2083 2098 2092 584 597 595 608 621 631 976 985 992 998 1006 1017 1025 1034 1032 1026 1255 1334 1359 1458 1459 1486 1508 1556 1542 1547 1545 1861 1874 
1880 1862 1859 1903 1932 1931 1934 1939 1937 1956 2030 2029 2023 2022 1996 2160 2157 2140 2139 2108 2093 588 590 594 606 637 636 640 639 999 1001 1004 1021 1024 1028 1031 1027 1231 1208 1183 1184 1539 1538 1535 1537 1540 1857 1863 1860 1866 1865 1864 1909 1905 1933 1936 1935 1945 1950 1954 1949 1947 2027 2024 2202 2163 2155 2143 2142 2115 2094 598 601 600 605 612 614 644 641 642 646 1007 1020 1023 1029 1030 1087 1110 1132 1158 1160 1161 1565 1559 1575 1590 1856 1855 1853 1852 1850 1851 1911 1906 1908 1907 1938 1948 1944 1957 1958 1967 2203 2199 2197 2176 2167 2137 2130 2124 2096 596 603 602 604 615 659 650 652 649 647 1008 1038 
1037 1036 1035 1065 1068 1154 1156 1713 1573 1572 1576 1577 1606 1854 1762 1847 1842 1843 1844 1912 1914 1942 1941 1940 1952 1953 1959 1962 1965 2205 2200 2194 2186 2184 2185 2465 2471 2470 593 711 709 706 618 665 648 654 653 645 1045 1044 1041 1042 1040 1039 1071 1162 1159 1714 1715 1583 1581 1647 1626 1764 1763 1837 1835 1840 1846 1849 1916 1917 1946 1951 1955 1987 1985 1982 2227 2216 2201 2193 2182 2181 2187 2466 2468 2469 713 712 710 704 707 669 668 658 655 895 919 938 955 971 990 1009 1005 1003 1721 1719 1716 1712 1686 1668 1735 1736 1766 1768 1817 1798 1796 1738 1739 1919 1920 1961 1960 1988 1981 1983 2238 2239 2241 2245 2183 2180 2174 2462 2467 2442 715 714 695 702 708 675 666 661 855 871 845 940 957 958 991 996 987 1000 1720 1724 1725 1708 1702 1718 1733 1747 1758 1769 1800 1799 1801 1741 1740 1620 1964 1963 1966 1968 1978 1976 2248 2232 2236 2246 2177 2178 2175 2461 2463 2443 678 698 696 699 693 684 829 828 842 860 849 836 956 967 
977 988 986 994 993 1722 1826 1825 1814 1808 1761 1755 1777 1775 1784 1781 1760 1743 1757 1622 1624 1628 1631 1970 1971 1973 2259 2231 2233 2244 2458 2460 2457 2456 2451 2444 679 694 697 703 738 745 833 831 827 861 844 839 832 968 970 989 984 983 982 981 1834 1823 1820 1803 1765 1778 1780 1773 1774 1767 1759 1746 1756 1623 1625 1627 1630 2314 2313 2310 2267 2275 2284 2291 2299 2453 2455 2454 2435 2438 680 691 692 716 730 750 746 781 812 816 788 835 834 965 963 964 926 908 
906 917 1833 1831 1824 1797 1770 1776 1779 1772 1744 1745 1748 1750 1754 1619 1621 1632 1637 2315 2311 2309 2307 2305 2302 2301 2300 2422 2421 2425 2428 2434 681 686 687 740 737 760 771 782 795 791 789 875 878 881 950 939 927 910 912 915 1841 1836 1822 1794 1789 1783 1782 1785 1786 1737 1742 1751 1753 1644 1651 1635 
1638 1636 2342 2336 2304 2334 2320 2312 2298 2419 2420 2427 2424 2429 676 672 673 742 729 731 774 777 811 814 786 877 876 880 886 941 916 907 914 911 1845 1838 1819 1806 1810 1787 1790 1793 1788 1732 1727 1726 1645 1646 1648 1640 1639 1634 2340 2335 2333 2332 2328 2327 2297 2431 2432 2430 2417 2426 677 670 671 743 739 736 776 779 808 793 794 792 883 882 887 893 896 898 888 879 1848 1832 1830 1818 1811 1696 1791 1707 1710 1717 1723 1641 1650 1652 1656 1658 1660 1629 2339 2331 2325 2326 2338 2348 2347 2412 2408 2406 2413 2414 725 723 718 741 744 753 775 780 806 797 798 804 873 874 868 869 858 890 892 872 1827 1828 1821 1815 1813 1697 1700 1701 1706 1698 1685 1643 1649 1655 1661 1663 1662 2321 2323 2322 2324 2375 2337 2361 2370 2380 2390 2397 2396 2352 724 722 717 735 733 761 769 787 799 800 805 810 813 817 863 859 857 891 889 862 847 1829 1802 1812 1809 1705 1703 1699 1693 1691 1687 1642 1669 1667 1666 1664 2392 2379 2381 2377 2378 2374 2373 
2372 2371 2382 2359 2358 2362 2349 719 721 720 726 728 727 773 784 801 802 803 819 818 820 821 853 848 894 897 854 850 851 1804 1805 1807 1704 1694 1695 1692 1688 1683 1678 1674 1671 1670 1665 2388 2387 2386 2384 2383 2385 2369 2368 2367 2366 2363 2354 2351 2350",

935 976 975 20 21 30 31 32 121 120 118 169 171 172 173 174 214 212 213 328 332 339 344 354 362 373 387 406 447 465 471 680 681 684 687 690 697 709 721 729 736 
739 824 843 847 848 936 937 938 939 942 970 969 26 29 34 36 37 110 111 113 175 176 177 178 179 220 219 216 341 345 349 355 363 372 384 399 417 438 456 464 695 
696 700 704 710 715 723 733 740 743 747 841 846 850 852 940 941 943 945 948 965 966 33 35 38 42 46 98 102 104 180 181 183 185 186 225 224 223 350 353 357 364 370 383 394 405 422 435 450 459 714 716 719 722 726 731 738 744 750 754 756 855 856 860 862 944 946 950 953 958 964 967 39 40 43 49 61 81 91 95 190 192 193 197 
198 231 230 229 358 360 365 368 375 392 402 413 425 439 451 460 732 734 737 741 742 746 752 757 761 765 767 865 867 870 871 947 951 954 959 962 968 972 41 44 48 54 67 77 84 88 200 202 204 206 209 237 236 235 366 367 371 374 379 404 410 423 432 446 457 463 748 749 753 755 758 760 764 768 773 775 778 875 876 878 880 949 952 957 960 963 971 981 45 47 52 58 70 78 82 87 210 211 215 217 218 244 241 240 376 378 382 386 388 416 420 430 441 454 462 467 759 762 763 766 769 772 776 779 783 787 790 882 883 884 886 988 991 997 1005 1009 1008 1000 50 51 57 66 74 80 85 90 221 222 226 227 228 249 246 247 389 390 391 393 395 424 426 434 448 461 

1989 1983 1979 1974 1967 1961 642 634 629 622 615 610 606 603 599 592 589 587 537 536 538 1170 1172 1175 1179 1182 1187 1194 1203 1213 1221 1230 1240 1247 1253 1254 2403 2404 2405 2406 2388 2387 2386 2102 2022 2018 2012 2007 2001 1995 1988 1981 1978 1972 1965 1960 669 661 650 639 632 627 621 614 609 601 596 594 533 531 532 1180 1181 1185 1190 1196 1200 1207 1217 1224 1234 1244 1252 1257 1261 1264 2400 2401 2408 2407 2394 2392 2391 2112 2027 2020 2014 2008 2000 1993 1987 1982 1976 1968 1962 1959 701 691 675 658 644 635 630 626 619 611 605 602 529 527 526 1188 1191 1197 1204 1210 1216 1223 1231 1242 1251 1259 1265 1271 1275 1279 2421 2422 2418 2413 2399 2397 2395 2115 2039 2025 2016 2009 1999 1992 1986 1980 1975 1964 1956 1955 751 735 703 676 655 641 636 631 624 617 612 608 525 522 520 
1198 1202 1211 1219 1227 1233 1241 1248 1256 1266 1273 1281 1286 1291 1297 2426 2429 2425 2419 2402 2398 2396 2118 2066 2073 2076 2074 2064 2050 2026 1994 1971 1957 1950 1948 816 796 728 688 665 646 638 633 628 620 616 613 519 521 518 1206 1214 1232 1238 1245 1250 1255 1262 1270 1280 1290 1301 1306 1310 1314 2447 2441 2437 2433 2393 2390 2389 2124 2083 2084 2086 2082 2072 2057 2031 1985 1963 1949 1943 1941 896 908 974 1011 1034 1047 1051 1053 1055 1060 1063 1068 1132 1334 
1335 1302 1289 1267 1258 1260 1263 1269 1278 1285 1296 1308 1316 1319 1322 1324 2448 2446 2445 2443 2385 2384 2383 2129 2101 2100 2098 2094 2087 2077 2065 1953 1945 1937 1932 1929 961 973 1002 1025 1040 1050 1054 1058 1062 1065 1069 1072 1133 1336 1337 1309 1300 1283 1276 1274 1277 1282 1292 1303 1313 1321 1325 1328 
1331 1333 2452 2451 2449 2450 2377 2376 2375 2131 2121 2116 2114 2111 2103 2096 2089 1930 1925 1921 1917 1914 1014 1019 1032 1045 1052 1059 1064 1067 1071 1073 1076 1078 1137 1340 1341 1318 1311 1298 1288 1284 1287 1294 1305 1315 1323 1327 1332 1338 1344 1348 2456 2455 2453 2454 2373 2371 2372 2143 2138 2134 2132 2130 2122 2117 2113 1908 1907 1903 1896 1892 1056 1057 1061 1066 1070 1074 1077 1079 1080 1081 1082 1083 1138 1342 1343 1329 1317 1307 1299 1293 1295 1304 1312 1320 1326 1330 1339 1354 1360 1363 2460 2458 2457 2459 2370 2368 2369 2154 2152 2150 2148 2145 2140 2137 2133 1890 1886 1881 1871 1864 1098 1097 1093 1092 1091 1090 1089 1088 1087 1085 1086 1084 1139 1345 1346 1347 1361 1369 1374 1382 1388 1393 1399 1405 1408 1404 1396 1381 1378 1377 2463 2461 2462 2464 2366 2365 2367 
2169 2166 2167 2164 2161 2158 2155 2153 1873 1866 1857 1842 1833 1142 1136 1126 1119 1111 1106 1102 1101 1099 1096 1095 1094 1134 1349 1350 1355 1364 1370 1375 1383 1389 1397 1402 1411 1414 1412 1407 1398 1394 1390 2467 2465 2466 2468 2361 2363 2364 2184 2183 2181 2179 2178 2175 2172 2170 1859 1850 1835 1812 1790 1195 1177 1156 1140 1128 1121 1114 1110 1107 1105 1104 1103 1131 1351 1352 1358 1366 1371 1376 1384 1391 1400 1410 1418 1423 1421 1417 1413 1409 1403 2470 2469 2471 2472 2359 2360 2362 2202 2201 2197 2195 2194 2192 2190 2189 1854 1843 1819 1772 1727 1268 1225 1186 1160 1141 1130 1123 1118 1115 1112 1109 1108 1129 1353 1357 1362 1367 1372 1379 1385 1392 1401 1415 1426 1430 1429 1427 1424 1419 1416 2474 2473 2475 2476 2356 2357 2358 2223 2222 2219 2216 2212 2211 2208 2206 1862 
1851 1823 1738 1617 1387 1272 1208 1171 1147 1135 1127 1122 1120 1116 1113 1117 1125 1356 1359 1365 1368 1373 1380 1386 1395 1406 1420 1434 1435 1432 1431 1428 1425 1422 2479 2477 2478 2480 2353 2354 2355 2241 2239 2236 2234 2233 2231 2230 2229 1884 1879 1872 1889 1893 1883 1844 1826 1811 1791 1774 1760 1748 1734 1722 1714 1705 1700 1633 1627 1616 1603 1589 1575 1558 1539 1517 1490 1462 1448 1441 1436 1433 1437 1438 2482 2481 2483 2484 2352 2351 2350 2256 2255 2254 2253 2252 2251 2248 2247 1900 1899 1897 1902 1904 1901 1829 1820 1806 1789 1771 1759 1747 1733 1721 1712 1702 1695 1638 1631 1619 1605 1592 1578 1561 1543 1522 1497 1475 1460 1450 1443 1440 1439 1442 2485 2486 2487 2488 2349 2347 2345 2266 2265 2264 2262 2261 2260 2258 2259 1915 1913 1911 1910 1912 1909 1821 1815 1802 1785 
1770 1757 1746 1732 1718 1707 1696 1690 1642 1635 1622 1610 1596 1583 1567 1549 1529 1504 1484 1468 1457 1451 1446 1445 1444 2489 2490 2492 2494 2340 2337 2333 2283 2276 2272 2268 2269 2270 2271 2273 1927 1924 1923 1922 1920 1918 1813 1808 1797 1781 1769 1755 1743 1729 1715 1703 1691 1685 1650 1640 1629 1614 1600 1587 1571 1553 1535 1514 1492 1478 1466 1456 1452 1449 1447 2491 2493 2497 2498 2332 2327 2319 2298 2288 2279 2274 2278 2282 2284 2286 1942 1938 1934 1931 1928 1926 1810 1803 1793 1779 1767 1753 1741 1728 1713 1698 1684 1674 1660 1649 1637 1621 1606 1593 1576 1559 1542 1524 1501 1485 1472 1464 1458 1455 1453 2495 2496 2500 2499 2330 2324 2317 2304 2292 2281 2280 2287 2291 2293 2295 1954 1951 1946 1940 1935 1933 1801 1795 1787 1776 1764 1752 1739 1725 1710 1693 1680 1672 1661 
1652 1641 1626 1612 1597 1582 1564 1547 1532 1511 1493 1479 1471 1465 1459 1454 2348 2346 2343 2341 2244 2245 2246 2250 2257 2267 2277 2290 2294 2297 2301 1970 1969 1952 1944 1939 1936 1799 1792 1783 1773 1762 1751 1737 1724 1708 1692 1679 1671 1662 1654 1647 1636 1618 1601 1585 1569 1554 1538 1521 1502 1486 1476 1469 1463 1461 2344 2342 2339 2338 2242 2240 2238 2237 2243 2263 2275 2289 2296 2300 2302 1990 2004 2021 2028 2029 2030 1876 1868 1858 1847 1838 1828 1814 1794 1775 1754 1735 1716 1694 1678 1663 1645 1624 1607 1590 1574 1560 1546 1528 1510 1494 1482 1474 1470 1467 2336 2335 2334 2331 2235 2232 2226 2220 2207 2182 2163 2146 2128 2104 2085 2063 2038 2037 2035 2033 2032 1877 1869 1860 1849 1839 1830 1816 1796 1777 1756 1736 1717 1697 1681 1665 1651 1632 1613 1598 1580 1566 1551 
1534 1519 1503 1489 1481 1477 1473 2329 2328 2326 2325 2227 2224 2213 2204 2193 2176 2159 2144 2127 2105 2088 2071 2055 2051 2046 2042 2040 1882 1874 1863 1852 1841 1831 1817 1798 1778 1758 1740 1719 1699 1682 1668 1653 1634 1615 1599 1584 1570 1556 1541 1527 1513 1499 1488 1483 1480 2323 2321 2322 2320 2221 2214 2205 2196 2185 2171 2157 2142 2126 2106 2090 2075 2062 2058 2053 2049 2045 1887 1880 1867 1855 1845 1832 1818 1800 1780 1761 1742 1720 1701 1683 1670 1655 1639 1620 1602 1586 1573 1563 1550 1536 1523 1508 1496 1491 1487 2318 2316 2315 2314 2217 2209 2200 2191 2180 2168 2156 2141 2125 2107 2091 2078 2067 2061 2054 2047 2044 1894 1888 1878 1861 1846 1834 1822 1804 1782 1763 1744 1723 1704 1686 1673 1664 1656 1643 1623 1604 1588 1572 1557 1545 1531 1518 1507 1498 1495 2313 2311 
2312 2310 2218 2210 2198 2187 2177 2165 2151 2139 2123 2108 2092 2079 2069 2060 2052 2041 2036 1905 1898 1885 1865 1848 1836 1824 1805 1784 1766 1745 1726 1706 1687 1675 1666 1657 1644 1625 1608 1591 1577 1562 1548 1537 1526 1515 1505 1500 2309 2308 2306 2303 2228 2215 2199 2186 2174 2162 2149 2136 2120 2110 2095 2081 2070 2059 2048 2034 2023 1919 1906 1891 1870 1853 1837 1825 1807 1786 1768 1749 1730 1709 1688 1676 1667 1658 1646 1628 1609 1594 1579 1565 1552 1540 1530 1520 1512 1506 2307 2305 2299 2285 2249 2225 2203 2188 2173 2160 2147 2135 2119 2109 2093 2080 2068 2056 2043 2024 1998 1947 1916 1895 1875 1856 1840 1827 1809 1788 1765 1750 1731 1711 1689 1677 1669 1659 1648 1630 1611 1595 1581 1568 1555 1544 1533 1525 1516 1509",
"7 3 2 9 20 30 37 42 48 57 68 71 74 86 96 107 115 122 140 157 186 223 258 291 320 365 396 435 467 491 528 553 566 580 590 620 638 653 662 676 691 700 712 738 760 784 802 814 832 860 872 880 902 925 922 943 955 969 988 997 1028 1062 1100 1155 1229 1319 1413 1533 1635 1723 1810 1881 1931 1977 2037 2084 2133 2185 2256 2332 2401 2449 2497 2538 2570 2593 2622 2635 3337 3346 3368 3389 3406 3426 3461 3493 3510 3521 3528 3533 1 4 6 12 22 32 40 45 49 59 64 72 81 88 90 103 113 131 152 167 189 225 259 286 325 361 393 436 470 500 527 541 562 585 598 621 637 646 663 673 692 706 721 742 762 785 801 818 841 859 876 886 899 914 923 938 949 964 977 989 1025 1059 1099 1152 1219 1303 1411 1540 1646 1731 1812 1876 1928 1978 2038 2083 2125 2183 2254 2338 2406 2465 2519 2553 2580 2612 2641 2656 3332 3341 3364 3385 3399 3427 3460 3489 3505 3522 3526 3529 5 10 11 15 25 34 43 52 56 61 65 73 79 83 92 106 117 136 158 177 204 226 261 290 326 366 404 438 473 497 524 544 569 591 604 619 636 647 665 681 696 711 725 752 769 790 804 819 838 857 871 885 895 911 924 936 942 957 972 987 1016 1055 1090 1139 1193 1266 1368 1566 1674 1749 1824 1882 1930 1976 2024 2069 2114 2170 2236 2360 2429 2483 2530 2565 2597 2634 2664 2686 3315 3329 3352 3375 3398 3424 3459 3485 3501 3509 3523 3532 13 14 18 26 33 41 51 53 62 66 69 77 84 93 100 111 123 133 159 184 218 236 260 292 323 368 403 439 468 495 526 548 575 600 612 626 645 650 671 686 704 715 733 753 768 789 805 817 834 850 868 882 891 909 920 931 939 954 971 990 1015 1051 1086 1120 1166 1209 1244 1687 1733 1787 1839 1888 1933 1980 2017 2062 2104 2139 2167 2445 2474 2513 2548 2581 2625 2669 2710 2736 3293 3300 3331 3362 3391 3423 3454 3476 3499 3508 3520 3530 8 16 23 31 36 44 54 58 67 76 78 85 89 97 102 110 119 137 165 196 233 278 316 351 389 421 450 482 517 542 565 583 601 608 625 631 651 667 677 693 710 723 739 757 776 793 807 825 827 846 867 874 890 903 915 928 940 956 966 991 1010 1041 1066 1096 1130 1153 1176 1760 1788 1826 1867 1903 1935 1969 2007 2048 2075 2101 2116 2494 2511 2544 2577 2620 2666 2719 2763 2811 3229 3267 3310 3342 3377 3411 3446 3471 3491 3507 3518 3524 19 17 27 28 39 47 50 60 70 75 82 91 94 98 104 118 128 151 181 216 244 275 317 358 390 416 448 485 525 552 570 582 599 615 633 643 660 674 687 699 717 735 747 765 778 799 812 822 831 849 863 873 888 892 908 926 937 951 967 985 1003 1030 1052 1074 1097 1116 1126 1814 1829 1852 1879 1913 1945 1967 2000 2032 2055 2074 2089 2527 2546 2566 2611 2658 2712 2772 2846 2946 3125 3215 3275 3324 3367 3400 3434 3464 3481 3506 3515 3531 
24 21 29 35 38 46 55 63 80 87 95 99 101 108 116 127 141 160 187 219 254 287 322 357 395 425 458 494 534 554 567 587 603 622 640 658 668 682 697 708 729 750 759 772 780 796 810 820 835 852 861 866 878 887 907 921 933 945 962 983 1000 1017 1029 1054 1073 1085 1095 1859 1860 1874 1890 1918 1946 1970 1988 2014 2035 2052 
2059 2556 2567 2594 2643 2691 2752 2818 2908 2999 3106 3192 3265 3306 3360 3392 3422 3455 3477 3497 3512 3525 227 201 185 176 163 153 143 134 112 105 109 114 120 121 130 138 155 173 203 232 265 299 334 367 401 432 464 499 529 551 571 593 617 629 655 675 689 702 713 720 737 754 767 781 779 791 809 821 829 847 851 864 
875 884 898 919 935 946 970 986 995 1004 1019 1035 1045 1058 1061 1884 1885 1889 1905 1921 1942 1966 1983 2004 2028 2046 2045 2571 2588 2621 2670 2723 2784 2864 2943 3029 3111 3186 3253 3307 3354 3388 3418 3452 3472 3496 3513 3519 243 197 191 180 166 162 148 139 126 124 125 129 132 135 142 154 171 195 221 252 280 310 347 379 406 437 479 514 540 561 578 605 628 642 664 683 709 719 722 728 743 756 770 775 783 788 803 816 826 833 844 858 869 881 893 917 932 941 968 982 992 1002 1013 1024 1032 1047 1049 1891 1893 1897 1911 1927 1948 1960 1981 1995 2019 2042 2047 2586 2606 2636 2684 2740 2819 2910 2988 3062 3127 3197 3258 3311 3353 3386 3417 3444 3470 3490 3503 3516 267 202 198 192 188 168 164 156 144 146 145 149 147 150 161 174 193 222 240 271 293 315 356 385 414 449 484 518 545 568 586 616 635 656 684 705 730 748 734 741 744 758 763 773 774 787 800 815 824 828 836 854 865 879 894 912 930 944 965 981 994 999 1007 1018 1026 1034 1046 1895 1899 1904 1915 1934 1951 1958 1975 1996 2013 2033 2036 2587 2613 2650 2701 2759 2854 2971 3039 3095 3159 3219 3277 3312 3348 3379 3403 3435 3462 3483 3495 3498 307 220 213 208 206 194 183 175 179 172 169 170 178 182 190 200 212 235 253 282 306 332 364 394 427 451 492 519 547 572 592 618 644 670 701 732 764 811 889 961 1027 1107 1174 1247 1334 1418 1517 1601 1697 1785 1858 1938 2011 2090 2157 2216 2284 2368 2439 2517 2578 2648 2716 2770 2813 2858 2875 3599 3600 3595 3594 3587 3577 3571 3569 3559 3556 3550 3549 3259 3239 3218 3194 3172 3135 3088 3100 3145 3188 3238 3289 3320 3344 3373 3394 3429 3451 3468 3488 3494 353 237 231 229 228 217 211 210 215 207 205 199 209 214 224 230 242 256 274 298 324 350 377 407 429 463 498 531 555 579 602 624 649 679 718 749 792 840 904 973 1036 1104 1175 1245 1331 1419 1511 1604 1695 1776 1862 1940 2003 2081 2153 2217 2292 2363 2440 2516 2585 2657 2725 2788 2831 2876 2890 3610 3606 3603 3597 3592 3583 3579 3575 3565 
3561 3551 3545 3270 3249 3225 3199 3171 3150 3138 3149 3177 3220 3262 3299 3328 3351 3372 3387 3419 3439 3458 3474 3484 392 255 257 249 251 247 245 246 239 234 238 241 248 250 262 263 266 276 289 311 336 363 384 411 440 478 507 536 558 584 610 630 654 685 716 755 808 856 910 979 1044 1110 1177 1253 1338 1422 1509 1597 1684 1770 1854 1936 2006 2072 2151 2219 2298 2372 2452 2525 2596 2671 2745 2815 2874 2913 2927 3622 3616 3611 3613 3598 3590 3582 3578 3564 3560 3547 3539 3280 3261 3235 3202 3183 3170 3163 3175 3201 3236 3276 3305 3326 3357 3378 3393 3412 3432 3449 3466 3465 441 281 285 283 273 279 277 270 268 264 269 272 284 288 
296 295 297 294 309 329 354 375 391 412 447 480 511 538 563 594 614 632 659 688 727 766 813 862 918 975 1042 1111 1179 1254 1342 1425 1515 1595 1678 1765 1848 

1225 1317 1403 1506 1617 1724 1844 1968 2108 2227 2328 2413 2485 2547 2608 2680 2755 2839 2918 2998 3069 3152 3243 3330 3404 3478 3534 3576 3614 3629 3646 3651 3649 3642 3615 3566 3482 3334 3313 3321 3308 3652 3655 3658 3659 3663 3657 3660 3672 3673 3675 3679 3681 3871 3867 3876 3872 3874 3892 3906 3917 3938 3953 3957 3958 3964 3971 3978 3977 3986 3990 3997 4007 4000 573 420 418 417 413 399 397 400 409 410 419 430 452 474 508 550 609 669 724 786 842 896 952 1008 1077 1147 
1222 1310 1401 1501 1605 1713 1831 1959 2121 2240 2340 2419 2488 2555 2614 2683 2758 2834 2916 2996 3075 3160 3254 3339 3414 3487 3540 3581 3628 3650 3661 3669 3664 3656 3636 3596 3538 3479 3448 3437 3433 3668 3678 3680 3683 3693 3685 3684 3687 3690 3686 3692 3689 3864 3862 3866 3868 3877 3890 3898 3910 3932 3948 3959 3963 3968 3973 3980 3983 3994 3996 4001 4009 4011 607 469 466 457 443 433 422 424 428 434 444 460 483 510 539 574 627 680 736 795 845 900 947 1005 1075 1143 
1220 1300 1389 1490 1588 1683 1792 1923 2169 2288 2373 2443 2506 2560 2616 2687 2757 2830 2909 2993 3078 3167 3268 3356 3442 3511 3563 3607 3644 3667 3691 3695 3700 3688 3670 3648 3608 3584 3562 3553 3554 3703 3713 3710 3719 3714 3708 3707 3706 3699 3697 3705 3702 3851 3849 3859 3858 3879 3885 3895 3914 3931 3945 3955 3965 3970 3984 3989 3993 3998 4010 4014 4017 4025 652 522 512 502 476 462 446 442 445 456 465 489 506 533 564 596 639 690 745 794 848 901 953 1006 1071 1140 
1214 1295 1385 1478 1569 1639 1710 1768 2321 2367 2426 2475 2526 2574 2623 2695 2764 2833 2906 2987 3071 3164 3274 3381 3469 3537 3591 3637 3671 3698 3724 3733 3736 3737 3723 3704 3682 3665 3654 3662 3676 3729 3745 3749 3751 3741 3732 3726 3720 3718 3712 3716 3709 3832 3830 3843 3850 3861 3875 3889 3908 3928 3941 3951 3962 3969 3987 4002 4008 4013 4020 4029 4027 4034 694 589 556 532 509 490 471 455 459 475 488 503 523 549 577 606 648 695 746 798 853 906 958 1009 1070 1138 
1206 1283 1367 1467 1544 1602 1647 1677 2410 2432 2478 2514 2551 2592 2642 2708 2768 2837 2901 2983 3065 3161 3283 3415 3504 3574 3632 3677 3717 3743 3768 3780 3786 3789 3783 3773 3766 3756 3752 3750 3764 3785 3791 3793 3784 3774 3757 3738 3730 3727 3728 3721 3722 3827 3825 3828 3835 3853 3860 3878 3903 3919 3935 3946 3956 3979 4003 4019 4024 4026 4032 4037 4035 4039 726 678 595 543 520 505 486 472 477 496 501 516 537 557 576 613 657 703 751 806 855 905 963 1014 1069 1132 
1205 1281 1363 1449 1531 1581 1619 1614 2477 2491 2518 2541 2573 2619 2663 2720 2778 2843 2902 2966 3045 3131 3257 3463 3573 3638 3694 3735 3776 3801 3820 3833 3848 3847 3855 3856 3844 3841 3842 3840 3852 3857 3854 3838 3822 3792 3771 3754 3740 3739 3734 3731 3725 3813 3819 3821 3824 3831 3846 3873 3899 3913 3929 3942 3952 4015 4023 4030 4036 4040 4038 4043 4044 4050 761 839 916 960 993 1022 1050 1060 1082 1089 1106 1117 1129 1148 1161 1168 1180 1195 1208 1223 1238 1259 1285 1288 1301 1330 1351 1360 1380 1399 1424 1454 1488 1535 2523 2534 2549 2572 2600 2645 2689 2738 2787 2852 2897 2952 3020 3081 3129 3630 3674 3715 3760 3796 3836 3865 3884 3902 3909 3912 3920 3923 3924 3927 3933 3934 3939 3930 3916 3882 3845 3814 3779 3767 3759 3755 3747 3744 3742 3805 3810 3812 3818 3823 3834 3881 
3894 3904 3922 3937 3943 4031 4028 4041 4046 4049 4053 4056 4059 4067 797 913 948 974 1001 1021 1048 1065 1078 1087 1103 1119 1136 1157 1163 1172 1186 1198 1211 1228 1239 1255 1276 1290 1302 1328 1347 1362 1378 1397 1426 1448 1473 1497 2557 2568 2583 2602 2628 2667 2709 2748 2794 2847 2889 2932 2986 3032 3054 3762 3777 3807 3837 3870 3900 3940 3954 3967 3972 3981 3988 3995 4005 4004 4012 4022 4021 4006 3985 3926 3869 3829 3794 3778 3775 3765 3753 3761 3758 3790 3799 3800 3809 3817 3816 3880 3886 3897 3907 3918 3925 4045 4054 4057 4064 4063 4071 4070 4073 4080 837 959 976 996 1020 1033 1053 1064 1080 1091 1108 1121 1144 1159 1167 1178 1188 1200 1221 1241 1249 1261 1278 1292 1307 1332 1349 1366 1381 1402 1428 1447 1461 1480 2603 2605 2624 2639 2662 2692 2727 2762 2801 2845 2881 2924 2962 3003 3016 3863 3883 3896 3921 3949 3974 3999 4016 4033 4042 4052 4065 4076 4082 4092 4101 4115 4117 4109 4079 3960 3891 3839 3798 3782 3781 3770 3763 3769 3772 3787 3788 3795 3804 3811 3803 3888 3887 3893 3901 3911 3915 4062 4068 4069 4077 4078 4085 4084 4095 4091 883 998 1011 1023 1037 1057 1068 1079 1094 1112 1123 1135 1150 1164 1173 1194 1199 1210 1234 1251 1269 1277 1289 1304 1318 1343 1359 1372 1390 1415 1434 1446 1465 1481 2646 2653 2660 2678 2697 2722 2744 2781 2805 2848 2883 2915 2944 2968 2978 3961 3966 3975 3992 4018 4048 4072 4089 4113 4121 4132 4140 4148 4158 4167 4178 4195 4203 4226 4268 4388 4463 4511 4529 4535 4544 4542 4545 4547 4554 4567 4574 4581 4591 4595 4601 4395 4400 4401 4393 4391 4386 4083 4086 4087 4088 4096 4102 4098 4097 4100 934 1038 1043 1056 1063 1081 1092 1101 1114 1122 1133 1145 1162 1181 1192 1207 1218 1231 1248 1270 1280 1293 1306 1321 1339 1356 1374 1391 1409 1430 1445 1460 1475 1493 2681 2685 2698 2711 
2732 2749 2775 2800 2823 2867 2894 2921 2949 2957 2964 4051 4055 4066 4074 4094 4123 4147 4162 4189 4202 4208 4217 4234 4243 4249 4260 4278 4299 4332 4369 4432 4490 4521 4538 4550 4557 4553 4570 4573 4579 4587 4596 4593 4598 4604 4612 4394 4390 4387 4383 4385 4379 4099 4105 4103 4104 4107 4111 4110 4106 4108 984 1067 1072 1083 1084 1098 1115 1124 1128 1134 1156 1170 1182 1203 1215 1226 1237 1250 1268 1287 1291 1316 1326 1341 1361 1375 1394 1408 1433 1443 1468 1479 1496 1507 2715 2713 2721 2737 2765 2780 2802 2828 2853 2884 2911 2936 2959 2969 2967 4135 4137 4143 4156 4172 4200 4227 4253 4261 4273 4288 4302 4316 4326 4331 4344 4351 4384 4414 4445 4487 4520 4548 4563 4580 4584 4589 4600 4609 4615 4616 4624 4627 4629 4626 4631 4382 4377 4371 4370 4364 4361 4119 4127 4122 4116 4120 4124 4118 4114 4112 1031 1093 1102 1109 1118 1131 1137 1142 1154 1165 1184 1201 1212 1233 1240 1252 1263 1279 1296 1309 1323 1337 1348 1371 1393 1405 1421 1440 1458 
1470 1483 1498 1516 1525 2741 2746 2760 2776 2795 2807 2824 2856 2882 2907 2935 2954 2981 2990 2989 4213 4218 4222 4239 4258 4280 4312 4333 4343 4356 4372 4381 4392 4408 4415 4420 4428 4450 4483 4515 4536 4566 4592 4611 4628 4635 4643 4641 4645 4639 4644 4647 4653 4655 4651 4654 4358 4362 4359 4355 4352 4350 4141 4142 4134 4133 4136 4130 4129 4125 4126 1088 1125 1127 1146 1151 1160 1169 1183 1190 1202 1213 1227 1242 1258 1272 1284 1294 1311 1322 1333 1357 1370 1386 1404 1423 1438 1462 1474 1489 1505 1512 1526 1537 1547 2771 2777 2791 2806 2822 2844 2863 2886 2919 2942 2960 2977 3005 3011 3013 4289 4295 4305 4314 4329 4338 4411 4416 4423 4429 4451 4466 4469 4479 4498 4500 4510 4525 4546 4571 4594 4621 4650 4664 4676 4677 4689 4691 4686 4680 4668 4666 4667 4672 4663 4662 4357 4345 4348 
4347 4340 4336 4165 4168 4157 4150 4146 4145 4144 4139 4138 1141 1158 1171 1187 1191 1197 1216 1224 1232 1236 1246 1267 1275 1299 1308 1320 1329 1345 1355 1377 1395 1412 1427 1444 1459 1476 1492 1510 1527 1536 1545 1556 1560 1562 2809 2814 2826 2841 2860 2879 2900 2925 2950 2974 2995 3006 3027 3035 3040 4365 4368 4378 4389 4396 4402 4504 4503 4517 4523 4534 4539 4541 4552 4562 4572 4577 4590 4617 4638 4656 4674 4699 4717 4721 4734 4731 4733 4725 4713 4704 4697 4693 4690 4679 4682 4342 4335 4334 4328 4315 4308 4196 4198 4188 4175 4164 4161 4154 4153 4151 1196 1204 1217 1230 1235 1243 1257 1264 1273 1282 1298 1312 1327 1340 1352 1358 1369 1383 1400 1414 1437 1453 1469 1485 1504 1521 1532 1543 1550 1561 1571 1574 1578 1576 2861 2865 2869 2871 2891 2912 2934 2956 2984 3008 3028 3037 3046 
3058 3070 4439 4433 4441 4448 4452 4462 4575 4582 4597 4599 4607 4625 4630 4640 4649 4659 4657 4671 4692 4712 4724 4741 4754 4766 4773 4783 4777 4775 4761 4759 4740 4729 4718 4709 4702 4696 4330 4325 4318 4311 4291 4272 4231 4216 4204 4191 4185 4180 4171 4163 4160 1256 1260 1271 1274 1286 1297 1305 1315 1324 1336 1354 1364 1373 1384 1392 1407 1420 1439 1455 1472 1486 1502 1523 1529 1542 1554 1565 1573 1577 1587 1596 1600 1609 1613 2892 2895 2905 2920 2937 2953 2979 3000 3026 3042 3056 3068 3084 3096 3108 4505 4506 4509 4513 4516 4522 4648 4665 4670 4685 4701 4705 4707 4716 4727 4735 4739 4748 4767 4788 4802 4812 4819 4833 4841 4846 4847 4840 4823 4814 4787 4762 4744 4730 4726 4720 4323 4322 4307 4306 4286 4266 4245 4228 4219 4206 4194 4193 4182 4170 4159 1313 1314 1325 1335 1344 1353 
1365 1376 1388 1398 1410 1416 1431 1436 1452 1464 1477 1494 1513 1524 1534 1552 1567 1580 1583 1586 1591 1607 1612 1620 1629 1630 1633 1634 2926 2928 2938 2955 2973 2992 3007 3031 3057 3079 3101 3110 3124 3130 3147 4559 4560 4558 4565 4569 4578 4749 4753 4756 4763 4784 4786 4791 4795 4811 4825 4830 4843 4864 4876 4886 4892 4898 4908 4915 4927 4921 4916 4906 4884 4848 4813 4785 4757 4746 4738 4317 4313 4304 4294 4282 4265 4252 4240 4233 4225 4210 4205 4190 4174 4166 1379 1382 1387 1396 1406 1417 1429 1441 1456 1463 1471 1484 1491 1495 1503 1522 1541 1549 1558 1568 1579 1598 1615 1624 1625 1621 1627 1640 1641 1649 1652 1650 1651 1657 2961 2963 2975 2997 3015 3038 3048 3067 3097 3120 3139 3151 3166 3181 3189 4634 4632 4636 4637 4642 4646 4853 4856 4859 4865 4877 4883 4889 4897 4907 4918 
4924 4938 4959 4974 4982 4992 5001 5003 5014 5020 5017 5011 4995 4972 4929 4875 4827 4790 4765 4752 4297 4303 4298 4290 4279 4262 4256 4247 4237 4229 4215 4211 4199 4184 4176 1442 1451 1450 1457 1466 1482 1487 1499 1520 1528 1539 1546 1553 1555 1557 1572 1584 1589 1608 1622 1631 1644 1655 1663 1659 1660 1661 1667 1664 1673 1671 1665 1669 1676 3002 3001 3012 3030 3043 3059 3080 3103 3132 3156 3182 3200 3217 3231 3242 4711 4700 4706 4703 4708 4714 4963 4962 4961 4969 4984 4987 4999 5007 5013 5021 5030 5044 5054 5070 5079 5090 5099 5107 5120 5127 5125 5118 5106 5081 5022 4944 4867 4818 4782 4764 4300 4296 4287 4283 4274 4267 4254 4251 4248 4236 4221 4207 4197 4186 4179 1500 1508 1518 1530 1538 1551 1548 1559 1570 1582 1590 1599 1606 1610 1616 1628 1637 1645 1656 1670 1681 1691 1699 1703 
1711 1708 1704 1707 1701 1705 1696 1693 1694 1702 3023 3034 3036 3052 3066 3086 3105 3133 3168 3196 3233 3263 3285 3296 3304 4778 4768 4774 4769 4772 4781 5068 5071 5064 5075 5086 5091 5102 5108 5121 5132 5143 5158 5164 5174 5191 5202 5214 5221 5232 5241 5242 5237 5230 5222 5167 5000 4901 4835 4796 4771 4301 4293 4285 4277 4270 4263 4257 4250 4246 4238 4220 4209 4201 4181 4173 1563 1564 1575 1585 1594 1603 1611 1618 1632 1636 1648 1653 1654 1662 1666 1682 1685 1686 1698 1715 1728 1744 1745 1747 1751 1753 1742 1738 1734 1729 1722 1718 1720 1719 3041 3049 3053 3072 3091 3116 3142 3173 3209 3247 3288 3318 3345 3370 3376 4860 4852 4855 4854 4861 4862 5190 5189 5186 5195 5200 5208 5215 5225 5234 5244 5252 5267 5285 5292 5299 5303 5315 5331 5341 5356 5358 5368 5371 5398 5448 5629 5740 5806 
5855 5869 6547 6550 6558 6567 6589 6595 6607 6623 6633 6648 6661 6687 6696 6718 6730 1623 1626 1638 1642 1643 1658 1668 1672 1680 1690 1706 1709 1712 1716 1721 1735 1739 1730 1736 1754 1779 1797 1804 1805 1799 1789 1780 1771 1764 1752 1748 1741 1740 1732 3055 3063 3076 3094 3117 3143 3169 3206 3251 3303 3347 3382 3416 3436 3447 4948 4950 4940 4945 4949 4951 5304 5295 5300 5301 5307 5323 5328 5332 5344 5354 5364 5373 5386 5394 5403 5415 5424 5433 5450 5457 5468 5481 5492 5535 5590 5689 5770 5828 5868 5882 6537 6544 6554 6568 6586 6593 6604 6620 6640 6652 6662 6684 6698 6719 6733 1689 1688 1692 1700 1714 1717 1725 1726 1727 1737 1761 1773 1775 1783 1791 1800 1801 1766 1763 1796 1850 1868 1865 1846 1835 1827 1817 1807 1790 1786 1774 1767 1756 1755 3077 3087 3098 3114 3136 3162 3198 3248 
3295 3355 3409 3450 3486 3514 3527 5047 5040 5039 5037 5035 5028 5405 5411 5410 5414 5419 5432 5439 5442 5451 5459 5474 5482 5493 5506 5513 5520 5529 5538 5558 5572 5584 5592 5607 5647 5698 5760 5815 5862 5890 5907 6531 6539 6546 6562 6580 6591 6611 6630 6642 6654 6668 6688 6709 6723 6734 1750 1743 1746 1758 1762 1769 1772 1778 1781 1793 1816 1828 1840 1849 1864 1877 1900 1961 1979 1984 1952 1937 1924 1898 1878 1861 1841 1832 1818 1809 1794 1784 1782 1777 3093 3102 3113 3128 3146 3180 3228 3279 3335 3401 3473 3536 3572 3601 3612 5148 5147 5149 5144 5137 5138 5511 5516 5512 5522 5536 5543 5548 5552 5561 5573 5586 5602 5606 5612 5615 5624 5637 5645 5656 5669 5680 5695 5714 5746 5781 5823 5860 5905 5930 5937 6516 6521 6533 6551 6572 6592 6602 6625 6643 6655 6675 6691 6715 6732 6743 1802 
1803 1808 1815 1819 1821 1823 1834 1837 1842 1863 1875 1886 1901 1922 1947 1963 1994 2015 2031 2025 2012 1991 1949 1910 1883 1857 1845 1838 1825 1822 1806 1798 1795 3104 3112 3119 3137 3154 3190 3240 3298 3363 3445 3535 3619 3666 3701 3711 5269 5265 5255 5253 5249 5247 5609 5611 5620 5633 5649 5662 5661 5670 5675 5676 5690 5699 5703 5710 5708 5722 5727 5733 5741 5757 5768 5778 5800 5825 5846 5881 5912 5950 5965 5979 6508 6514 6529 6542 6565 6583 6606 6619 6646 6657 6683 6703 6729 6744 6750 1853 1851 1856 1866 1871 1870 1869 1872 1880 1894 1902 1920 1939 1953 1972 1997 2022 2040 2064 2086 2093 2088 2077 1993 1943 1907 1873 1855 1836 1833 1830 1820 1811 1813 3107 3115 3126 3140 3153 3195 3245 3314 3383 3475 3588 3748 3797 3815 3826 5376 5375 5372 5357 5362 5360 5709 5712 5717 5732 5744 
5754 5761 5766 5777 5780 5790 5791 5795 5796 5789 5799 5808 5813 5816 5830 5839 5854 5883 5900 5917 5939 5969 5995 6013 6030 6507 6513 6518 6541 6559 6579 6596 6615 6636 6659 6689 6711 6736 6749 6756 1887 1892 1896 1906 1908 1912 1909 1914 1919 1941 1955 1974 1987 2009 2026 2050 2071 2094 2118 2143 2166 2191 2239 2365 2456 2532 2589 2647 2699 2739 2773 2790 2803 2816 4461 4457 4442 4430 4418 4413 4398 4360 4319 4255 4155 3991 3950 3947 3936 5490 5483 5479 5466 5458 5452 5787 5792 5807 5819 5833 5842 5858 5872 5875 5878 5887 5886 5884 5877 5870 5874 5876 5879 5885 5892 5909 5925 5942 5961 5983 6002 6025 6045 6065 6075 6495 6500 6506 6528 6552 6573 6598 6614 6638 6665 6692 6726 6751 6760 6766 1925 1929 1932 1944 1950 1954 1956 1962 1971 1989 2002 2020 2034 2058 2078 2105 2119 2137 2168 
2198 2231 2266 2327 2400 2473 2543 2599 2655 2707 2747 2785 2808 2820 2840 4473 4456 4449 4437 4427 4419 4406 4376 4337 4281 4214 4131 4081 4061 4047 5610 5601 5594 5575 5557 5546 5852 5859 5871 5897 5915 5938 5955 5977 5978 5982 5981 5973 5962 5959 5952 5949 5943 5940 5945 5956 5974 5990 6003 6022 6031 6049 6064 6090 6111 6130 6470 6480 6498 6512 6540 6561 6594 6616 6647 6666 6693 6727 6754 6764 6773 1957 1964 1965 1973 1982 1990 1999 2008 2018 2030 2043 2060 2068 2100 2117 2142 2159 2177 2211 2246 2285 2331 2385 2442 2503 2558 2615 2674 2724 2779 2810 2835 2857 2870 4476 4464 4458 4454 4446 4435 4422 4403 4367 4324 4276 4224 4187 4169 4152 5718 5704 5692 5673 5650 5642 5916 5919 5934 5957 5987 6021 6051 6074 6085 6080 6071 6057 6041 6033 6029 6018 6009 5998 5997 6008 6024 6038 6053 
6066 6083 6095 6109 6127 6158 6190 6435 6453 6486 6502 6530 6557 6587 6612 6650 6671 6699 6738 6757 6774 6777 1986 2001 2005 2010 2021 2027 2039 2054 2057 2066 2085 2096 2112 2131 2155 2180 2203 2230 2262 2302 2341 2383 2434 2482 2533 2584 2640 2696 2750 2804 2850 2877 2904 2914 4474 4472 4480 4477 4475 4471 4453 4426 4407 4373 4339 4310 4275 4264 4244 5837 5817 5783 5752 5725 5715 5954 5970 5999 6019 6058 6102 6150 6184 6193 6186 6162 6143 6119 6101 6087 6077 6056 6050 6042 6047 6061 6079 6089 6106 6122 6137 6154 6177 6218 6273 6378 6424 6465 6497 6520 6553 6584 6609 6637 6672 6704 6740 6761 6780 6790 2016 2023 2029 2041 2051 2056 2076 2082 2095 2097 2115 2126 2145 2171 2189 2213 2244 2274 2306 2347 2384 2427 2479 2520 2559 2617 2677 2730 2786 2842 2887 2922 2947 2965 4465 4470 4481 
4491 4493 4489 4482 4460 4438 4421 4399 4374 4353 4341 4327 5968 5931 5865 5812 5776 5769 5992 6005 6034 6068 6129 6192 6272 6303 6306 6289 6262 6234 6199 6170 6142 6121 6103 6094 6086 6091 6097 6108 6124 6145 6163 6175 6201 6221 6251 6297 6362 6409 6456 6496 6515 6543 6576 6605 6635 6674 6713 6745 6770 6782 6796 2044 2049 2053 2065 2079 2087 2103 2109 2122 2127 2146 2165 2181 2202 2224 2249 2282 2318 2357 2393 2423 2460 2510 2545 2590 2652 2714 2769 2829 2888 2941 2985 3019 3033 4443 4455 4478 4495 4512 4514 4508 4501 4488 4467 4447 4434 4424 4409 4410 6123 6082 5929 5851 5804 5785 6006 6027 6052 6098 6171 6274 6432 6458 6433 6397 6355 6309 6261 6228 6188 6166 6147 6132 6125 6133 6131 6140 6153 6172 6202 6216 6236 6245 6275 6300 6352 6405 6454 6492 6509 6538 6566 6600 6645 6682 6716 
6746 6772 6786 6795 2070 2073 2080 2092 2098 2106 2123 2135 2150 2161 2174 2186 2210 2229 2248 2277 2319 2350 2390 2421 2457 2496 2536 2582 2630 2693 2756 2817 2885 2951 3004 3051 3090 3121 4417 4436 4459 4494 4519 4530 4532 4531 4527 4518 4499 4497 4492 4485 4468 6324 6353 6505 6590 6649 6679 7301 7281 7238 7173 7079 6944 6731 6644 6574 6501 6431 6364 6312 6270 6239 6214 6189 6174 6160 6152 6148 6169 6185 6204 6222 6242 6271 6307 6333 6356 6370 6376 6394 6392 6399 6410 6421 6426 6434 6438 6450 6460 6461 6471 6467 2091 2099 2102 2107 2113 2129 2149 2160 2178 2187 2200 2215 2232 2252 2278 2313 2351 2380 2417 2448 2490 2529 2569 2618 2672 2728 2799 2873 2945 3021 3083 3144 3193 3224 4380 4404 4444 4502 4533 4549 4556 4564 4568 4561 4555 4551 4543 4540 4537 6482 6510 6582 6639 6680 6701 
7308 7295 7258 7199 7123 7024 6905 6811 6721 6597 6499 6416 6349 6298 6265 6241 6223 6203 6191 6179 6178 6198 6217 6233 6247 6258 6283 6321 6344 6361 6377 6383 6387 6395 6401 6412 6415 6422 6430 6436 6449 6457 6464 6472 6474 2110 2111 2120 2130 2138 2154 2164 2175 2196 2207 2220 2238 2257 2286 2316 2349 2375 2404 2444 2469 2512 2552 2601 2654 2717 2782 2849 2923 3009 3089 3165 3244 3317 3365 4321 4349 4405 4528 4576 4588 4603 4608 4619 4620 4618 4622 4613 4606 4605 6603 6624 6660 6695 6724 6748 7337 7321 7291 7250 7185 7121 7050 6983 6896 6678 6535 6439 6363 6315 6284 6259 6240 6224 6207 6197 6196 6211 6231 6238 6255 6276 6295 6323 6346 6368 6375 6381 6379 6393 6407 6413 6419 6427 6420 6429 6444 6462 6466 6473 6477 2124 2128 2134 2152 2163 2176 2179 2194 2206 2228 2245 2263 2294 2322 
2342 2370 2397 2428 2472 2501 2537 2576 2633 2694 2754 2827 2898 2982 3064 3155 3256 3366 3467 3544 4230 4271 4309 4633 4652 4658 4660 4661 4673 4681 4684 4688 4683 4675 4669 6707 6720 6737 6765 6776 6792 7365 7356 7336 7306 7264 7222 7187 7171 7203 7397 7517 7599 7667 7746 7831 7908 7979 8048 8133 8219 8305 8411 8494 8576 8665 8755 8852 8958 9051 9103 9140 9179 9213 9243 9269 9294 9308 9311 9334 9358 9382 9396 9429 9442 9444 2136 2144 2147 2162 2172 2184 2201 2214 2226 2243 2265 2290 2323 2348 2374 2398 2425 2458 2498 2528 2562 2610 2673 2731 2793 2866 2940 3025 3118 3223 3349 3500 3647 3802 4075 4192 4241 4715 4722 4728 4732 4736 4737 4742 4747 4751 4745 4743 4750 6794 6797 6805 6815 6821 6831 7399 7393 7378 7359 7343 7318 7309 7317 7368 7452 7531 7600 7665 7743 7827 7894 7971 8058 
8136 8222 8312 8405 8487 8580 8653 8737 8831 8981 9061 9111 9150 9182 9216 9245 9268 9297 9306 9322 9340 9354 9371 9385 9451 9453 9447 2148 2158 2156 2173 2182 2205 2222 2235 2250 2271 2291 2314 2345 2376 2399 2422 2451 2480 2521 2554 2591 2638 2704 2766 2836 2903 2980 3061 3157 3269 3405 3653 3806 3944 4090 4183 4223 4794 4798 4803 4808 4804 4807 4817 4826 4834 4839 4838 4842 6862 6864 6873 6875 6884 6886 7420 7423 7418 7415 7406 7403 7409 7424 7474 7521 7556 7604 7671 7747 7830 7899 7975 8059 8139 8223 8313 8394 8478 8562 8634 8707 8760 9071 9101 9135 9174 9205 9236 9257 9275 9300 9314 9331 9344 9350 9364 9380 9467 9469 9461 2195 2188 2199 2218 2234 2233 2242 2259 2276 2296 2315 2335 2361 2395 2420 2450 2470 2500 2535 2575 2626 2668 2734 2798 2872 2939 3017 3092 3174 3266 3327 3905 
3976 4060 4149 4212 4235 4874 4882 4890 4891 4894 4903 4905 4911 4920 4932 4935 4942 6918 6927 6931 6939 6940 6941 7457 7467 7471 7468 7472 7473 7494 7514 7553 7607 7705 7781 7848 7922 7985 8043 8096 8153 8207 8266 8320 8393 8468 8546 8632 8702 8739 9122 9143 9164 9198 9229 9252 9273 9291 9312 9328 9342 9352 9360 9370 9383 9471 9473 9468 2192 2197 2209 2223 2237 2247 2261 2281 2308 2320 2336 2355 2391 2412 2441 2471 2495 2522 2561 2598 2649 2705 2767 2821 2899 2976 3044 3123 3204 3273 3302 4093 4128 4177 4232 4269 4284 4967 4976 4983 4986 4993 5002 5006 5018 5027 5042 5043 5053 6997 7000 7005 7004 7006 7007 7509 7513 7519 7516 7520 7535 7549 7578 7618 7670 7729 7797 7865 7921 7980 8037 8093 8149 8210 8267 8314 8378 8448 8527 8664 8725 8754 9156 9172 9196 9219 9248 9266 9284 9295 9317 
9335 9351 9356 9369 9384 9392 9482 9478 9474 2193 2190 2204 2225 2251 2267 2287 2309 2326 2339 2359 2377 2411 2436 2467 2493 2524 2550 2579 2627 2676 2733 2792 2862 2933 3014 3085 3158 3237 3297 3323 4242 4259 4292 4320 4346 4354 5062 5069 5076 5078 5096 5105 5116 5129 5146 5156 5151 5163 7066 7068 7060 7064 7065 7075 7547 7546 7552 7554 7567 7581 7603 7633 7658 7710 7763 7818 7878 7929 7992 8040 8097 8148 8209 8254 8300 8357 8406 8445 8761 8786 8812 9192 9203 9215 9237 9255 9280 9290 9301 9318 9343 9353 9368 9379 9399 9405 9494 9490 9487 2241 2253 2260 2270 2275 2295 2312 2333 2352 2362 2386 2405 2424 2454 2484 2508 2539 2563 2604 2651 2700 2761 2825 2893 2972 3047 3134 3214 3287 3343 3371 4366 4375 4397 4412 4431 4440 5161 5173 5181 5196 5205 5219 5231 5251 5266 5277 5281 5290 7136 
7134 7130 7132 7128 7131 7585 7584 7583 7587 7602 7624 7643 7672 7704 7739 7792 7836 7893 7947 8009 8053 8109 8156 8202 8251 8286 8338 8377 8403 8842 8856 8873 9214 9225 9234 9244 9264 9286 9302 9315 9330 9347 9363 9381 9398 9412 9411 9496 9492 9489 2255 2258 2264 2280 2301 2325 2343 2356 2366 2392 2403 2414 2433 2462 2486 2515 2564 2595 2632 2679 2735 2797 2859 2929 3018 3099 3178 3264 3338 3397 3425 4484 4486 4496 4507 4526 4524 5272 5284 5291 5302 5310 5325 5349 5367 5378 5393 5402 5420 7205 7204 7200 7198 7197 7196 7613 7626 7620 7625 7631 7647 7673 7703 7740 7775 7819 7861 7911 7962 8017 8069 8116 8163 8206 8250 8287 8324 8356 8376 8917 8926 8935 9217 9235 9246 9253 9272 9292 9307 9326 9346 9359 9378 9394 9406 9417 9423 9509 9504 9503 2269 2268 2273 2293 2317 2334 2353 2369 2388 
2402 2416 2430 2446 2468 2487 2502 2607 2631 2659 2703 2751 2812 2880 2958 3050 3141 3232 3319 3408 3480 3517 4583 4586 4585 4602 4614 4610 5370 5377 5385 5401 5416 5438 5455 5484 5497 5524 5537 5555 7274 7272 7271 7266 7269 7276 7639 7645 7646 7653 7663 7682 7701 7736 7772 7804 7843 7888 7925 7976 8030 8081 8124 8171 8220 8260 8290 8322 8349 8366 8997 9002 9009 9207 9231 9249 9263 9282 9303 9320 9339 9361 9373 9388 9402 9408 9421 9424 9515 9519 9516 2272 2279 2289 2311 2330 2346 2358 2378 2396 2409 2431 2438 2455 2476 2492 2504 2644 2661 2688 2729 2774 2838 2896 2994 3082 3179 3281 3390 3492 3589 3635 4694 4695 4698 4710 4723 4719 5456 5471 5486 5504 5523 5547 5568 5600 5626 5657 5679 5686 7331 7328 7330 7329 7332 7333 7660 7664 7668 7677 7687 7707 7730 7765 7803 7837 7874 7910 7946 
7995 8044 8091 8140 8195 8237 8268 8294 8326 8344 8361 9053 9065 9091 9175 9224 9254 9276 9287 9309 9329 9357 9377 9390 9400 9420 9426 9427 9431 9521 9523 9520 2283 2299 2305 2324 2337 2354 2371 2389 2408 2415 2435 2447 2464 2481 2499 2507 2665 2675 2706 2742 2789 2851 2917 3010 3109 3211 3325 3456 3604 3746 3808 4800 4805 4810 4820 4822 4831 5551 5567 5580 5603 5619 5639 5666 5697 5729 5771 5802 5821 7387 7385 7386 7383 7382 7376 7680 7685 7691 7697 7711 7732 7762 7795 7828 7863 7902 7931 7972 8016 8065 8110 8154 8204 8245 8278 8303 8332 8352 8369 9097 9108 9133 9178 9227 9261 9281 9299 9316 9341 9376 9393 9404 9418 9430 9436 9434 9435 9531 9528 9529 2297 2304 2310 2329 2344 2364 2382 2394 2407 2418 2437 2453 2466 2489 2505 2509 2682 2690 2718 2753 2796 2855 2930 3022 3122 3227 3350 
3502 3696 3982 4058 4922 4928 4931 4946 4954 4956 5640 5653 5664 5677 5694 5721 5748 5784 5840 5899 5944 5964 7444 7443 7438 7431 7433 7428 7702 7706 7714 7722 7738 7764 7784 7810 7845 7884 7926 7955 7996 8041 8079 8125 8175 8218 8257 8289 8316 8345 8363 8380 9129 9134 9158 9193 9230 9265 9288 9313 9332 9362 9389 9409 9422 9433 9443 9449 9463 9460 9539 9537 9538 4755 4760 4776 4779 4792 4806 4821 4836 4858 4873 4879 4896 4913 4941 4960 4964 5038 5051 5072 5103 5126 5136 5135 5115 5083 5025 4958 4851 4687 4425 4363 5049 5057 5061 5074 5080 5087 5711 5720 5726 5743 5764 5788 5814 5849 5913 6039 6104 6126 7490 7488 7484 7485 7486 7480 7712 7724 7737 7751 7767 7786 7811 7841 7872 7901 7942 7983 8022 8070 8103 8152 8200 8241 8275 8309 8341 8367 8385 8402 9149 9157 9180 9206 9238 9274 9298 
9325 9349 9372 9401 9425 9432 9445 9456 9466 9475 9476 9556 9551 9548 4758 4770 4780 4789 4809 4816 4832 4850 4866 4878 4887 4904 4933 4952 4973 4980 5046 5059 5088 5117 5140 5155 5154 5139 5110 5058 4994 4909 4797 4678 4623 5197 5193 5209 5218 5220 5228 5762 5772 5782 5798 5826 5841 5863 5894 5918 6266 6290 6299 7527 7526 7522 7532 7529 7525 7725 7742 7754 7770 7793 7813 7838 7870 7898 7928 7966 8013 8057 8099 8138 8182 8227 8262 8298 8337 8371 8389 8410 8425 9168 9181 9194 9218 9247 9277 9310 9337 9366 9391 9419 9440 9458 9465 9472 9479 9491 9500 9564 9560 9555 4793 4799 4801 4815 4837 4844 4857 4868 4880 4893 4910 4930 4955 4975 4990 4996 5056 5082 5101 5131 5157 5188 5194 5179 5160 5128 5073 5009 4936 4869 4829 5322 5321 5333 5353 5363 5374 5793 5805 5831 5847 5873 5891 5902 5926 
5933 6475 6483 6481 7540 7537 7545 7555 7560 7564 7735 7744 7768 7787 7808 7842 7869 7895 7924 7954 8001 8051 8090 8129 8169 8215 8253 8288 8327 8362 8396 8417 8436 8444 9183 9189 9202 9223 9251 9278 9324 9365 9395 9413 9437 9462 9477 9488 9485 9498 9514 9522 9577 9574 9566 4824 4828 4845 4849 4863 4871 4885 4895 4899 4923 4939 4957 4970 4991 5008 5026 5066 5095 5122 5153 5177 5213 5246 5245 5236 5211 5165 5119 5065 5032 5010 5445 5447 5462 5485 5508 5528 5809 5835 5864 5895 5911 5927 5948 5966 5967 6663 6669 6676 7559 7565 7572 7586 7594 7609 7731 7748 7773 7801 7823 7862 7891 7919 7949 7987 8036 8075 8120 8165 8208 8246 8280 8315 8355 8391 8428 8453 8466 8476 9169 9191 9197 9211 9241 9271 9345 9387 9415 9441 9464 9486 9497 9510 9512 9518 9535 9554 9578 9586 9584 4870 4872 4881 4888 
4900 4902 4914 4926 4934 4947 4968 4985 4997 5012 5033 5055 5085 5111 5142 5166 5198 5233 5305 5320 5318 5308 5282 5243 5204 5180 5169 5566 5574 5589 5616 5651 5701 5810 5861 5901 5932 5951 5971 5988 5994 6001 6855 6858 6872 7562 7576 7590 7605 7627 7662 7718 7753 7785 7817 7847 7881 7917 7943 7981 8020 8071 8107 8151 8197 8239 8276 8306 8350 8392 8422 8455 8477 8491 8502 9154 9170 9177 9190 9208 9220 9410 9428 9438 9459 9484 9506 9525 9530 9534 9542 9558 9572 9589 9603 9600 4912 4917 4919 4925 4937 4943 4953 4965 4978 4988 5004 5015 5034 5050 5067 5089 5123 5145 5171 5192 5216 5226 5428 5431 5427 5407 5392 5369 5345 5327 5317 5678 5684 5702 5728 5758 5801 5857 5904 5941 5972 5996 6007 6023 6026 6035 7036 7054 7074 7543 7573 7592 7622 7651 7689 7727 7761 7799 7833 7867 7897 7932 7969 
8010 8056 8100 8141 8178 8226 8269 8308 8351 8388 8426 8461 8484 8512 8520 8530 9148 9152 9159 9160 9173 9184 9448 9457 9470 9483 9502 9526 9533 9540 9550 9562 9575 9585 9601 9612 9611 4966 4971 4977 4979 4981 4989 4998 5005 5016 5029 5041 5060 5084 5100 5112 5134 5159 5184 5206 5223 5238 5240 5541 5540 5527 5521 5510 5496 5489 5472 5465 5767 5775 5794 5820 5845 5880 5921 5960 5989 6014 6032 6048 6059 6067 6069 7209 7234 7311 7492 7561 7601 7630 7666 7713 7749 7783 7822 7855 7887 7920 7960 7998 8049 8084 8122 8166 8213 8256 8299 8342 8386 8423 8456 8486 8515 8544 8558 8560 9123 9125 9132 9137 9139 9145 9480 9481 9493 9508 9527 9543 9549 9559 9568 9581 9595 9610 9622 9628 9630 5019 5023 5024 5031 5036 5045 5048 5052 5063 5077 5092 5109 5133 5150 5162 5182 5212 5227 5239 5248 5256 5259 
5655 5658 5641 5635 5631 5621 5623 5622 5618 5844 5853 5866 5896 5923 5958 5986 6017 6037 6060 6073 6084 6100 6107 6110 7358 7375 7432 7524 7577 7610 7654 7690 7733 7769 7807 7846 7880 7915 7948 7988 8027 8067 8108 8150 8196 8242 8285 8333 8381 8427 8462 8493 8519 8551 8574 8587 8585 9099 9100 9102 9105 9109 9114 9499 9505 9517 9532 9546 9561 9567 9580 9591 9598 9613 9624 9640 9649 9650 5093 5094 5097 5098 5104 5113 5114 5124 5130 5141 5152 5170 5187 5203 5217 5229 5250 5268 5274 5271 5275 5278 5747 5749 5742 5737 5734 5738 5739 5751 5759 5908 5924 5936 5963 5993 6015 6040 6070 6088 6105 6117 6134 6141 6149 6144 7465 7478 7515 7568 7611 7652 7684 7717 7756 7791 7835 7864 7904 7935 7978 8023 8060 8106 8143 8185 8229 8272 8318 8359 8412 8465 8500 8526 8553 8579 8604 8621 8627 9074 9076 
9081 9084 9080 9083 9536 9541 9544 9553 9565 9579 9587 9594 9608 9620 9632 9646 9657 9670 9676 5168 5172 5176 5175 5178 5183 5185 5199 5201 5207 5210 5224 5235 5254 5270 5283 5287 5296 5289 5293 5298 5294 5829 5834 5827 5822 5832 5838 5836 5856 5889 5947 5980 6004 6028 6055 6078 6099 6118 6136 6155 6168 6183 6194 6208 6210 7544 7558 7580 7615 7649 7681 7708 7750 7780 7815 7854 7886 7923 7964 8007 8054 8092 8132 8173 8216 8263 8301 8347 8397 8446 8495 8523 8563 8586 8612 8636 8656 8672 9035 9033 9050 9059 9058 9062 9570 9573 9571 9576 9583 9593 9602 9615 9625 9638 9656 9666 9680 9701 9697 5263 5262 5261 5257 5260 5258 5264 5273 5276 5279 5280 5288 5286 5297 5306 5314 5316 5319 5311 5312 5313 5309 5898 5903 5906 5910 5922 5928 5935 5953 5985 6016 6046 6076 6096 6120 6139 6157 6180 6195 
6212 6226 6232 6243 6254 6252 7612 7621 7634 7661 7692 7716 7745 7779 7809 7844 7883 7913 7951 7990 8033 8074 8117 8160 8201 8249 8291 8335 8379 8432 8474 8521 8556 8592 8617 8645 8676 8698 8729 8984 9001 9017 9034 9032 9046 9590 9588 9592 9597 9605 9617 9621 9634 9636 9653 9672 9685 9712 9724 9728 5350 5348 5338 5335 5340 5326 5324 5329 5330 5334 5336 5337 5342 5347 5343 5351 5359 5361 5355 5352 5346 5339 5975 5976 5984 5991 6000 6010 6020 6036 6062 6092 6116 6138 6161 6181 6205 6220 6237 6249 6256 6268 6277 6282 6288 6294 7669 7679 7694 7709 7734 7760 7776 7806 7839 7871 7903 7941 7977 8019 8064 8104 8146 8198 8233 8273 8325 8374 8424 8470 8506 8545 8583 8615 8647 8679 8718 8747 8798 8901 8948 8982 9004 9015 9028 9609 9606 9614 9618 9626 9631 9635 9644 9655 9660 9678 9704 9739 9764 
9773 5430 5426 5418 5413 5412 5406 5399 5400 5390 5391 5395 5389 5387 5388 5384 5383 5382 5380 5381 5379 5366 5365 6044 6043 6054 6063 6072 6081 6093 6113 6135 6159 6187 6206 6227 6248 6269 6279 6291 6301 6304 6313 6319 6325 6334 6335 7720 7726 7741 7752 7777 7798 7820 7849 7875 7905 7938 7974 8011 8050 8098 8147 8189 8232 8270 8311 8360 8413 8460 8497 8536 8575 8606 8642 8677 8705 8743 8782 8825 8887 8921 8954 8976 8998 9007 9627 9623 9629 9639 9641 9643 9652 9658 9669 9675 9686 9696 9804 9819 9822 5509 5503 5500 5498 5487 5476 5464 5463 5453 5441 5440 5443 5436 5434 5422 5421 5417 5409 5408 5404 5396 5397 6112 6115 6114 6128 6146 6151 6156 6176 6209 6225 6253 6267 6281 6305 6320 6331 6340 6347 6348 6351 6360 6365 6373 6374 7771 7774 7778 7796 7812 7840 7859 7879 7909 7937 7968 8005 
8042 8082 8131 8180 8221 8264 8302 8340 8395 8443 8480 8518 8564 8598 8631 8666 8703 8733 8762 8797 8841 8881 8912 8939 8960 8978 8989 9645 9651 9648 9661 9663 9671 9674 9681 9688 9693 9703 9707 9850 9858 9861 5597 5587 5588 5578 5564 5554 5539 5532 5519 5515 5502 5495 5488 5473 5461 5460 5444 5437 5435 5429 5423 5425 6164 6167 6173 6182 6200 6215 6229 6244 6264 6286 6311 6326 6343 6354 6367 6372 6384 6388 6390 6396 6402 6400 6403 6408 7805 7814 7829 7834 7851 7873 7889 7916 7940 7965 8000 8034 8066 8114 8162 8211 8259 8296 8343 8384 8431 8472 8514 8548 8593 8625 8663 8697 8726 8757 8787 8819 8854 8884 8906 8933 8957 8971 8979 9668 9667 9664 9673 9679 9682 9694 9702 9710 9711 9720 9723 9885 9891 9892 5682 5672 5665 5652 5634 5628 5604 5591 5583 5571 5553 5545 5534 5518 5507 5491 5477 
5470 5467 5454 5449 5446 6213 6219 6230 6235 6246 6260 6280 6296 6317 6342 6371 6385 6398 6406 6411 6423 6425 6437 6445 6441 6447 6446 6443 6452 7850 7857 7868 7877 7892 7912 7934 7957 7973 8003 8031 8063 8101 8142 8190 8238 8283 8330 8383 8429 8459 8501 8540 8582 8614 8651 8683 8714 8738 8768 8806 8838 8860 8891 8923 8932 8951 8962 8973 9695 9689 9687 9699 9700 9709 9713 9717 9725 9727 9741 9746 9910 9909 9916 5763 5753 5730 5716 5693 5681 5663 5646 5638 5627 5605 5593 5577 5562 5549 5531 5514 5494 5480 5478 5469 5475 6250 6257 6263 6278 6285 6302 6322 6339 6358 6389 6417 6440 6448 6459 6463 6478 6476 6487 6491 6485 6484 6489 6490 6488 7896 7900 7906 7918 7939 7950 7963 7986 8006 8029 8055 8088 8127 8167 8212 8265 8307 8358 8404 8454 8492 8529 8567 8600 8638 8671 8700 8728 8758 8791 
8822 8851 8874 8897 8918 8936 8955 8974 8995 9718 9714 9715 9719 9716 9726 9735 9745 9750 9751 9760 9763 9931 9928 9937 5843 5824 5797 5765 5745 5723 5707 5688 5674 5667 5654 5632 5613 5596 5581 5563 5544 5525 5517 5505 5499 5501 6287 6293 6292 6308 6316 6336 6357 6380 6404 6442 6469 6493 6504 6511 6517 6525 6532 6536 6534 6526 6524 6523 6522 6519 7945 7944 7953 7958 7967 7982 8004 8021 8038 8061 8085 8112 8155 8191 8236 8277 8329 8375 8421 8471 8509 8547 8590 8624 8667 8699 8722 8753 8775 8808 8837 8864 8885 8909 8928 8947 8966 8994 9014 9732 9733 9734 9738 9737 9744 9756 9767 9777 9780 9787 9788 9942 9944 9948 5914 5888 5848 5811 5774 5750 5731 5719 5705 5691 5683 5668 5644 5625 5614 5598 5579 5560 5542 5533 5526 5530 6314 6310 6318 6328 6341 6366 6386 6418 6451 6494 6527 6549 6564 
6570 6575 6571 6578 6581 6577 6569 6563 6556 6555 6548 7989 7993 7991 8002 8008 8014 8032 8052 8068 8080 8111 8145 8188 8225 8258 8297 8346 8390 8441 8483 8522 8568 8608 8644 8686 8717 8748 8778 8802 8834 8858 8882 8903 8922 8945 8964 8993 9008 9023 9749 9748 9755 9759 9762 9771 9782 9799 9810 9816 9823 9824 9949 9950 9956 6011 5946 5893 5850 5803 5779 5755 5735 5724 5706 5696 5685 5660 5648 5636 5617 5599 5585 5569 5559 5556 5550 6327 6329 6332 6345 6359 6382 6414 6455 6503 6560 6599 6617 6627 6632 6629 6628 6622 6631 6621 6608 6610 6601 6588 6585 8024 8026 8028 8035 8045 8047 8062 8076 8095 8113 8134 8168 8205 8247 8279 8319 8368 8408 8463 8510 8543 8595 8629 8668 8704 8736 8766 8794 8826 8855 8878 8900 8925 8946 8972 8996 9018 9031 9029 9768 9766 9774 9775 9784 9798 9814 9825 9836 
9842 9845 9844 9972 9967 9968 6165 6012 5920 5867 5818 5786 5773 5756 5736 5713 5700 5687 5671 5659 5643 5630 5608 5595 5582 5570 5565 5576 6330 6337 6338 6350 6369 6391 6428 6479 6545 6656 6697 6706 6702 6694 6685 6686 6670 6667 6658 6653 6651 6641 6634 6626 8072 8073 8077 8078 8083 8089 8094 8105 8115 8135 8158 8192 8224 8261 8293 8339 8387 8430 8475 8517 8561 8605 8649 8689 8724 8759 8785 8815 8844 8875 8894 8920 8950 8975 9003 9022 9036 9048 9049 9790 9791 9793 9786 9803 9820 9828 9843 9855 9863 9867 9871 9977 9979 9974 6468 6618 6710 6768 6813 6856 6890 6911 6953 6984 7010 7043 7078 7104 7119 7141 7154 7174 7192 7210 7224 7232 7353 7350 7339 7320 7284 7233 7169 7090 6989 6846 6808 6788 6779 6762 6752 6741 6728 6717 6705 6700 6690 6681 6673 6664 8118 8119 8121 8123 8128 8137 8126 
8130 8144 8159 8179 8217 8240 8271 8310 8354 8399 8440 8481 8525 8569 8610 8660 8701 8744 8779 8807 8840 8863 8890 8914 8941 8970 8999 9030 9042 9056 9070 9077 9801 9806 9805 9809 9817 9832 9847 9857 9869 9878 9875 9883 9980 9981 9984 6613 6677 6735 6784 6823 6857 6893 6916 6952 6985 7017 7049 7072 7095 7117 7142 7157 7172 7193 7219 7225 7236 7364 7357 7347 7324 7289 7241 7178 7113 7034 6954 6902 6868 6844 6819 6800 6789 6771 6759 6747 6742 6725 6722 6714 6708 8174 8172 8176 8183 8184 8186 8164 8157 8161 8181 8203 8230 8252 8282 8321 8364 8407 8451 8498 8535 8578 8630 8678 8721 8765 8795 8830 8859 8889 8907 8934 8961 8991 9021 9045 9069 9078 9086 9088 9794 9797 9808 9815 9829 9839 9859 9865 9881 9890 9886 9888 9992 9997 9990 6712 6739 6775 6804 6837 6870 6897 6925 6959 6991 7020 7048 
7076 7093 7118 7143 7164 7176 7202 7216 7229 7245 7369 7361 7352 7334 7302 7257 7217 7155 7091 7032 6977 6938 6906 6877 6849 6822 6807 6793 6781 6769 6763 6758 6753 6755 8228 8231 8235 8243 8248 8244 8199 8177 8187 8193 8214 8234 8255 8292 8331 8372 8416 8464 8508 8550 8591 8639 8690 8749 8788 8820 8850 8880 8908 8929 8956 8986 9013 9044 9068 9087 9098 9104 9110 9778 9776 9795 9821 9834 9852 9868 9879 9895 9894 9899 9902 9999 10000 9998 6767 6787 6802 6827 6847 6878 6907 6930 6968 6996 7026 7056 7082 7102 7126 7152 7167 7186 7211 7227 7242 7253 7372 7370 7355 7344 7314 7286 7246 7191 7145 7092 7042 7001 6963 6915 6885 6859 6835 
6814 6816 6799 6791 6785 6778 6783 8274 8281 8284 8295 8317 8348 8439 8490 8532 8565 8588 8611 8640 8655 8673 8693 8711 8730 8750 8764 8781 8805 8809 8804 8824 8846 8876 8904 8937 8963 8985 9011 9038 9067 9093 9112 9124 9130 9127 9761 9765 9783 9812 9833 9853 9862 9877 9900 9904 9914 9919 9996 9995 9994 6801 6817 6828 6845 6865 6883 6914 6942 6980 7009 7033 7062 7087 7109 7129 7149 7175 7194 7223 7240 7256 7262 7384 7373 7366 7351 7338 7313 7277 7235 7195 7148 7107 7055 7018 6965 6926 6892 6871 6854 6833 6820 6809 6806 6803 6798 8323 8328 8336 8353 8373 8409 8457 8499 8533 8572 8599 8613 8641 8662 8669 8695 8708 8727 8752 8770 8789 8811 8817 8829 8848 8871 8899 8924 8959 8990 9016 9041 9073 9096 9117 9136 9153 9163 9167 9742 9753 9772 9796 9827 9846 9866 9880 9896 9907 9917 9925 9991 
9988 9989 6830 6842 6851 6863 6881 6899 6924 6955 6990 7015 7039 7070 7096 7115 7139 7160 7179 7207 7226 7249 7265 7267 7398 7391 7377 7367 7354 7341 7310 7279 7248 7201 7153 7105 7069 7012 6967 6923 6894 6874 6853 6838 6826 6818 6812 6810 8365 8370 8382 8401 8418 8449 8479 8505 8538 8570 8597 8618 8635 8657 8670 8691 8706 8731 8756 8774 8793 8813 8833 8849 8867 8892 8915 8943 8980 9012 9040 9066 9094 9116 9144 9162 9187 9201 9210 9722 9731 9752 9779 9807 9835 9856 9876 9898 9915 9924 9935 9985 9993 9987 6861 6866 6876 6887 6900 6913 6943 6970 6999 7029 7052 7077 7098 7124 7150 7168 7189 7221 7237 7259 7278 7282 7410 7401 7395 7389 7374 7363 7340 7315 7287 7251 7213 7166 7120 7059 7003 6958 6919 6895 6869 6850 6840 6836 6824 6825 8398 8400 8415 8433 8452 8469 8496 8513 8542 8571 8602 
8616 8637 8661 8674 8692 8713 8735 8763 8780 8801 8823 8845 8866 8888 8913 8930 8965 9000 9027 9060 9090 9121 9142 9176 9200 9228 9240 9258 9691 9706 9729 9757 9789 9826 9849 9870 9897 9920 9927 9934 9976 9986 9983 6879 6880 6889 6903 6917 6937 6966 6987 7016 7037 7061 7081 7100 7127 7151 7177 7206 7231 7254 7273 7288 7297 7412 7411 7407 7404 7394 7380 7362 7348 7326 7294 7268 7230 7170 7097 7028 6973 6928 6904 6882 6860 6848 6843 6832 6829 8419 8420 8434 8450 8467 8482 8507 8528 8554 8577 8596 8620 8633 8652 8675 8694 8716 8741 8767 8784 8810 8836 8857 8877 8898 8927 8953 8992 9026 9047 9079 9113 9138 9166 9204 9233 9259 9289 9323 9637 9662 9692 9730 9770 9813 9838 9864 9893 9913 9929 9945 9962 9975 9978 6888 6901 6908 6921 6935 6956 6978 6998 7023 7044 7067 7089 7111 7138 7163 7180 
7212 7239 7263 7283 7298 7305 7421 7416 7422 7417 7413 7405 7392 7379 7371 7346 7327 7303 7255 7133 7047 6981 6936 6909 6891 6867 6852 6841 6834 6839 8437 8438 8442 8458 8473 8488 8511 8534 8555 8584 8603 8622 8628 8654 8680 8696 8719 8742 8776 8792 8818 8839 8870 8893 8916 8940 8967 9006 9039 9063 9095 9126 9155 9188 9221 9256 9285 9338 9414 9545 9607 9659 9705 9754 9800 9837 9860 9889 9906 9918 9940 9953 9969 9982 6898 6910 6922 6933 6949 6969 6988 7014 7038 7053 7080 7094 7112 7140 7162 7182 7214 7244 7270 7285 7299 7304 7427 7430 7435 7429 7426 7419 7414 7408 7402 7396 7390 7388 7400 7483 7538 7570 7591 7617 7637 7644 7659 7674 7688 7699 7782 7802 7832 7860 7890 7927 7956 7984 7999 8537 8549 8566 8594 8626 8658 8688 8723 8751 8777 8790 8814 8843 8868 8895 8919 8952 8988 9024 9052 
9075 9107 9128 9165 9209 9242 9279 9319 9375 9439 9524 9582 9633 9684 9736 9785 9830 9854 9884 9905 9923 9939 9955 9963 9973 6912 6920 6929 6947 6957 6975 6995 7022 7041 7057 7083 7101 7110 7135 7161 7184 7208 7243 7275 7292 7307 7312 7439 7442 7448 7446 7440 7447 7445 7441 7436 7434 7437 7453 7470 7510 7551 7575 7593 7614 7635 7641 7655 7678 7693 7715 7766 7800 7821 7852 7882 7933 7959 7994 8012 8524 8539 8559 8589 8623 8659 8687 8715 8746 8769 8796 8821 8847 8869 8896 8931 8968 9005 9037 9064 9092 9118 9146 9185 9226 9260 9293 9336 9386 9446 9513 9569 9619 9677 9721 9769 9818 9851 9887 9903 9921 9936 9951 9959 9971 6932 6934 6946 6964 6976 6994 7013 7027 7040 7058 7084 7103 7116 7137 7158 7181 7215 7247 7280 7300 7319 7322 7454 7450 7459 7464 7466 7463 7460 7461 7469 7475 7479 7497 
7512 7536 7563 7579 7595 7616 7632 7642 7656 7676 7695 7721 7759 7790 7816 7853 7876 7930 7970 8015 8039 8503 8516 8541 8581 8619 8648 8682 8710 8740 8773 8799 8827 8853 8872 8902 8938 8969 9010 9043 9072 9106 9131 9161 9199 9239 9270 9305 9348 9397 9455 9511 9563 9616 9665 9708 9758 9811 9848 9882 9908 9922 9932 9941 9954 9970 6945 6951 6962 6974 6986 7002 7019 7030 7045 7063 7085 7099 7125 7144 7156 7183 7218 7252 7290 7316 7335 7345 7451 7455 7462 7476 7482 7487 7489 7493 7496 7504 7506 7523 7533 7550 7571 7582 7597 7619 7629 7640 7657 7686 7698 7728 7758 7789 7824 7856 7885 7936 7997 8046 8087 8447 8485 8531 8573 8607 8646 8685 8709 8734 8772 8800 8828 8862 8879 8905 8944 8977 9020 9054 9082 9115 9141 9171 9212 9250 9283 9321 9355 9403 9450 9507 9557 9604 9654 9698 9747 9802 9841 
9874 9901 9926 9938 9947 9960 9964 6948 6960 6972 6982 6992 7008 7025 7031 7046 7073 7086 7108 7122 7146 7159 7188 7228 7260 7293 7323 7342 7360 7449 7458 7477 7491 7499 7498 7501 7507 7508 7518 7528 7539 7542 7557 7569 7588 7596 7608 7628 7638 7650 7683 7700 7723 7755 7788 7826 7858 7907 7952 8018 8086 8170 8334 8435 8504 8557 8609 8650 8684 8712 8732 8771 8803 8832 8865 8883 8910 8942 8987 9025 9057 9085 9120 9147 9186 9222 9262 9296 9327 9367 9407 9452 9501 9552 9596 9647 9690 9743 9792 9840 9873 9911 9933 9943 9952 9961 9966 6950 6961 6971 6979 6993 7011 7021 7035 7051 7071 7088 7106 7114 7147 7165 7190 7220 7261 7296 7325 7349 7381 7425 7456 7481 7495 7500 7502 7503 7505 7511 7534 7530 7541 7548 7566 7574 7589 7598 7606 7623 7636 7648 7675 7696 7719 7757 7794 7825 7866 7914 7961 
8025 8102 8194 8304 8414 8489 8552 8601 8643 8681 8720 8745 8783 8816 8835 8861 8886 8911 8949 8983 9019 9055 9089 9119 9151 9195 9232 9267 9304 9333 9374 9416 9454 9495 9547 9599 9642 9683 9740 9781 9831 9872 9912 9930 9946 9957 9958 9965"];

fn main() {
    let start = std::time::Instant::now();
    let time_limit = 1.95;
    let time_keeper = TimeKeeper::new(time_limit);
    let mut rng = rand_pcg::Pcg64Mcg::new(12345);
    let input = read_input();

    let (_, st, goal) = make_init_board_head_and_tail_start(&input);
    let mut target_board = DynamicMap2d::new_with(0, input.n);
    for (i, x) in PRE[input.t]
        .split_whitespace()
        .map(|v| v.parse::<i64>().unwrap())
        .enumerate()
    {
        let pos = Coord::new(i / input.n, i % input.n);
        target_board[pos] = x;
    }
    let mut state = State::new(&input, st, goal, target_board);

    state.quick_sort(&input, &mut rng, &time_keeper);
    state.output();
    let cost = calc_cost(&state.board, &input);
    let score = calc_score(input.cost, cost);
    eprintln!("Cost: {}", cost);
    eprintln!("Score: {}", score);

    #[allow(unused_mut, unused_assignments)]
    let mut elapsed_time = start.elapsed().as_micros() as f64 * 1e-6;
    #[cfg(feature = "local")]
    {
        eprintln!("Local Mode");
        elapsed_time *= 0.55;
    }
    eprintln!("Elapsed: {}", (elapsed_time * 1000.0) as usize);

    #[cfg(feature = "local")]
    {
        let output = {
            let mut actions = vec![];
            let mut i = 0;
            while i < state.actions.len() {
                let is_swap = state.actions[i];
                let dir1 = state.actions[i + 1];
                let dir2 = state.actions[i + 2];
                actions.push((is_swap, dir1, dir2));
                i += 3;
            }
            Output {
                init_pos1: state.init_pos1,
                init_pos2: state.init_pos2,
                actions,
            }
        };
        let max_turn = output.actions.len();
        visualizer::vis(input, output, max_turn);
    }
}

fn make_init_board_head_start(input: &Input) -> DynamicMap2d<i64> {
    let mut board = DynamicMap2d::new_with(0, input.n);
    let mut used = DynamicMap2d::new_with(false, input.n);
    let mut now = 1_i64;
    let mut Q = VecDeque::new();

    let mut cands = vec![];
    for i in 0..input.n {
        for j in 0..input.n {
            let pos = Coord::new(i, j);
            cands.push((input.legal_actions[pos].len(), i, j));
        }
    }
    cands.sort();
    let (_, i, j) = cands[0];
    Q.push_back(Coord::new(i, j));

    while now as usize <= input.n2 {
        while let Some(pos) = Q.pop_front() {
            if used[pos] {
                continue;
            }
            board[pos] = now;
            used[pos] = true;
            for (_, nxt) in input.legal_actions[pos].iter() {
                if !used[*nxt] {
                    Q.push_back(*nxt);
                }
            }
            break;
        }
        now += 1;
    }
    // #[cfg(feature = "local")]
    // visualizer::vis(input.n, &input.vs, &input.hs, &board.to_2d_vec());
    board
}

fn make_init_board_head_and_tail_start(input: &Input) -> (DynamicMap2d<i64>, Coord, Coord) {
    let mut cands = vec![];
    for i in 0..input.n {
        for j in 0..input.n {
            let pos = Coord::new(i, j);
            cands.push((input.legal_actions[pos].len(), i, j));
        }
    }
    cands.sort();
    let (_, i, j) = cands[0];
    let start = Coord::new(i, j);

    let INF = 1_usize << 60;
    let mut dist = DynamicMap2d::new_with(INF, input.n);
    let mut Q = VecDeque::new();

    dist[start] = 0;
    Q.push_back(start);
    while let Some(pos) = Q.pop_front() {
        for (_, nxt) in input.legal_actions[pos].iter() {
            if dist[pos] + 1 < dist[*nxt] {
                dist[*nxt] = dist[pos] + 1;
                Q.push_back(*nxt);
            }
        }
    }

    let mut cands = vec![];
    for i in 0..input.n {
        for j in 0..input.n {
            let pos = Coord::new(i, j);
            cands.push((dist[pos], Reverse(input.legal_actions[pos].len()), i, j));
        }
    }
    cands.sort();
    cands.reverse();
    let (_, _, i, j) = cands[0];
    let goal = Coord::new(i, j);

    let mut board = DynamicMap2d::new_with(0, input.n);
    let mut used = DynamicMap2d::new_with(false, input.n);
    let mut left = 1_i64;
    let mut right = input.n2 as i64;
    let mut Q1 = VecDeque::new();
    let mut Q2 = VecDeque::new();
    Q1.push_back(start);
    Q2.push_back(goal);
    let mut cnt = 0;

    while left <= right {
        let L = Q1.len();
        for _ in 0..L {
            let pos = Q1.pop_front().unwrap();
            if !used[pos] {
                Q1.push_back(pos);
            }
        }
        let L = Q2.len();
        for _ in 0..L {
            let pos = Q2.pop_front().unwrap();
            if !used[pos] {
                Q2.push_back(pos);
            }
        }

        if Q1.is_empty() {
            Q1 = Q2
                .clone()
                .into_iter()
                .collect_vec()
                .into_iter()
                .rev()
                .collect();
        }
        if Q2.is_empty() {
            Q2 = Q1
                .clone()
                .into_iter()
                .collect_vec()
                .into_iter()
                .rev()
                .collect();
        }

        if cnt % 2 == 0 {
            while let Some(pos) = Q1.pop_front() {
                if used[pos] {
                    continue;
                }
                board[pos] = left;
                used[pos] = true;
                for (_, nxt) in input.legal_actions[pos].iter() {
                    if !used[*nxt] {
                        Q1.push_back(*nxt);
                    }
                }
                break;
            }
            left += 1;
        } else {
            while let Some(pos) = Q2.pop_front() {
                if used[pos] {
                    continue;
                }
                board[pos] = right;
                used[pos] = true;
                for (_, nxt) in input.legal_actions[pos].iter() {
                    if !used[*nxt] {
                        Q2.push_back(*nxt);
                    }
                }
                break;
            }
            right -= 1;
        }
        cnt += 1;
    }
    // #[cfg(feature = "local")]
    // visualizer::vis(input.n, &input.vs, &input.hs, &board.to_2d_vec());
    (board, start, goal)
}

fn annealing(
    input: &Input,
    board: DynamicMap2d<i64>,
    rng: &mut rand_pcg::Pcg64Mcg,
    time_keeper: &TimeKeeper,
) -> DynamicMap2d<i64> {
    let mut state = AnnealingState::new(board, input);
    // eprintln!("Init cost: {}", state.cost);
    let mut best_state = state.clone();

    let T0 = (4 * input.n.pow(2)) as f64;
    let T1 = 1.0;

    while !time_keeper.isTimeOver() {
        let i1 = rng.gen_range(0..input.n);
        let j1 = rng.gen_range(0..input.n);
        let pos1 = Coord::new(i1, j1);
        let i2 = rng.gen_range(0..input.n);
        let j2 = rng.gen_range(0..input.n);
        let pos2 = Coord::new(i2, j2);
        if pos1 == pos2 {
            continue;
        }
        let diff = state.calc_diff_cost(pos1, pos2, input);
        let temp = T0 + (T1 - T0) * time_keeper.get_time() / time_keeper.time_threshold;
        if diff <= 0 || rng.gen_bool((-diff as f64 / temp).exp().min(1.0)) {
            state.swap(pos1, pos2);
            state.cost += diff;
        }
        if state.cost < best_state.cost {
            best_state = state.clone();
            best_state.cost = state.cost;
        }
    }
    let score = calc_score(input.cost, best_state.cost);
    eprintln!("Potential: {}", score);
    // #[cfg(feature = "local")]
    // visualizer::vis(input.n, &input.vs, &input.hs, &best_state.board.to_2d_vec());
    best_state.board
}

fn calc_cost(board: &DynamicMap2d<i64>, input: &Input) -> i64 {
    let mut cost = 0;
    for i in 0..input.n {
        for j in 0..input.n {
            let coord = Coord::new(i, j);
            let coord_down = Coord::new(i + 1, j);
            let coord_right = Coord::new(i, j + 1);

            if i + 1 < input.n && input.hs[i][j] == '0' {
                cost += (board[coord] - board[coord_down]).pow(2);
            }
            if j + 1 < input.n && input.vs[i][j] == '0' {
                cost += (board[coord] - board[coord_right]).pow(2);
            }
        }
    }
    cost
}

fn calc_score(init_cost: i64, cost: i64) -> i64 {
    let score = (init_cost as f64).log2() - (cost as f64).log2();
    let mut score = (1e6 * score).round() as i64;
    score = score.max(1);
    score
}

#[derive(Debug, Clone, Default)]
struct State {
    n: usize,
    n2: usize,
    init_pos1: Coord,
    init_pos2: Coord,
    pos1: Coord,
    pos2: Coord,
    board: DynamicMap2d<i64>,
    best_board: DynamicMap2d<i64>,
    actions: Vec<usize>,
}

impl State {
    fn new(input: &Input, pos1: Coord, pos2: Coord, best_board: DynamicMap2d<i64>) -> State {
        State {
            n: input.n,
            n2: input.n2,
            init_pos1: pos1,
            init_pos2: pos2,
            pos1,
            pos2,
            board: input.board.clone(),
            best_board,
            actions: vec![0],
        }
    }
    fn swap(&mut self, pos1: Coord, pos2: Coord) {
        let tmp = self.board[pos1];
        self.board[pos1] = self.board[pos2];
        self.board[pos2] = tmp;
    }
    fn search_different(&self, left: usize, right: usize) -> (usize, DynamicMap2d<u8>) {
        let mut different = DynamicMap2d::new_with(0, self.n);
        let mid = (left + right) / 2;
        let mut cnt = 0;
        for i in 0..self.n {
            for j in 0..self.n {
                let coord = Coord::new(i, j);
                let best_val = self.best_board[coord] as usize - 1;
                let now_val = self.board[coord] as usize - 1;
                if left <= best_val && best_val < mid && mid <= now_val && now_val < right {
                    different[coord] = 1;
                    cnt += 1;
                }
                if left <= now_val && now_val < mid && mid <= best_val && best_val < right {
                    different[coord] = 2;
                    cnt += 1;
                }
            }
        }
        cnt /= 2;
        (cnt, different)
    }
    fn quick_sort(
        &mut self,
        input: &Input,
        rng: &mut rand_pcg::Pcg64Mcg,
        time_keeper: &TimeKeeper,
    ) {
        let mut Q = vec![];
        let mut next_Q = vec![];
        let mut cnt = 0;
        Q.push((0, self.n2));
        while let Some((left, right)) = Q.pop() {
            if left == right {
                continue;
            }
            self.tsp(input, left, right, rng, time_keeper);
            if self.actions.len() > 3 * 4 * self.n2 {
                break;
            }
            if right - left > 1 {
                let mid = (left + right) / 2;
                next_Q.push((left, mid));
                next_Q.push((mid, right));
            }
            if Q.is_empty() {
                std::mem::swap(&mut Q, &mut next_Q);
                Q.sort();
                if cnt % 2 == 0 {
                    Q.reverse();
                }
                cnt += 1;
            }
        }
    }
    fn tsp(
        &mut self,
        input: &Input,
        left: usize,
        right: usize,
        rng: &mut rand_pcg::Pcg64Mcg,
        time_keeper: &TimeKeeper,
    ) {
        let (cnt, mut different) = self.search_different(left, right);
        if input.t == 19 {
            for _ in 0..cnt {
                let mut actions1 = self.bfs(input, self.pos1, 1, &mut different);
                let mut actions2 = self.bfs(input, self.pos2, 2, &mut different);
                assert!(!(actions1.is_empty() && actions2.is_empty()));
                while actions1.len() < actions2.len() {
                    actions1.push(DIRS_MAP[&'.']);
                }
                while actions1.len() > actions2.len() {
                    actions2.push(DIRS_MAP[&'.']);
                }
                for i in 0..actions1.len() {
                    self.actions.push(actions1[i]);
                    self.pos1 = self.pos1 + DIJ_DIFF[actions1[i]];
                    self.actions.push(actions2[i]);
                    self.pos2 = self.pos2 + DIJ_DIFF[actions2[i]];
                    self.actions.push(0);
                }
                *self.actions.last_mut().unwrap() = 1;
                self.swap(self.pos1, self.pos2);
            }
        } else {
            let mut to_down = vec![];
            let mut to_up = vec![];
            for i in 0..input.n {
                for j in 0..input.n {
                    let pos = Coord::new(i, j);
                    if different[pos] == 1 {
                        to_down.push(pos);
                    } else if different[pos] == 2 {
                        to_up.push(pos);
                    }
                }
            }
            let route1 = self.tsp_solver(
                input,
                &to_down,
                self.pos1,
                rng,
                time_keeper,
                time_keeper.get_time()
                    + 0.4 * ((right - left) as f64 / (input.n2) as f64).powf(2.0),
            );
            let route2 = self.tsp_solver(
                input,
                &to_up,
                self.pos2,
                rng,
                time_keeper,
                time_keeper.get_time()
                    + 0.4 * ((right - left) as f64 / (input.n2) as f64).powf(2.0),
            );

            let L = route1.len();
            for i in 0..L {
                let (mut actions1, mut actions2) = if i == 0 {
                    let actions1 = self.get_actions(input, self.pos1, route1[0]);
                    let actions2 = self.get_actions(input, self.pos2, route2[0]);
                    (actions1, actions2)
                } else {
                    let actions1 = self.get_actions(input, route1[i - 1], route1[i]);
                    let actions2 = self.get_actions(input, route2[i - 1], route2[i]);
                    (actions1, actions2)
                };
                while actions1.len() < actions2.len() {
                    actions1.push(DIRS_MAP[&'.']);
                }
                while actions1.len() > actions2.len() {
                    actions2.push(DIRS_MAP[&'.']);
                }
                for i in 0..actions1.len() {
                    self.actions.push(actions1[i]);
                    self.pos1 = self.pos1 + DIJ_DIFF[actions1[i]];
                    self.actions.push(actions2[i]);
                    self.pos2 = self.pos2 + DIJ_DIFF[actions2[i]];
                    self.actions.push(0);
                }
                *self.actions.last_mut().unwrap() = 1;
                self.swap(self.pos1, self.pos2);
            }
        }
    }
    fn tsp_solver(
        &self,
        input: &Input,
        to: &[Coord],
        st: Coord,
        rng: &mut rand_pcg::Pcg64Mcg,
        time_keeper: &TimeKeeper,
        until: f64,
    ) -> Vec<Coord> {
        let L = to.len();
        let mut g = vec![vec![0; L + 2]; L + 2];
        for i in 0..L {
            for j in 0..L {
                g[i + 2][j + 2] = input.dist[to[i]][to[j]];
            }
            g[i + 2][0] = input.dist[to[i]][st];
            g[0][i + 2] = g[i + 2][0];
            g[i + 2][1] = 100000;
            g[1][i + 2] = 100000;
        }
        let mut route = tsp::solve(&g, &tsp::greedy(&g), until, rng, time_keeper);
        if route[1] == 1 {
            route.reverse();
        }
        let route = route[1..route.len() - 2]
            .iter()
            .map(|&v| to[v - 2])
            .collect_vec();
        route
    }
    fn bfs(
        &self,
        input: &Input,
        st: Coord,
        search: u8,
        different: &mut DynamicMap2d<u8>,
    ) -> Vec<usize> {
        let mut dist: FxHashMap<Coord, usize> = FxHashMap::default();
        dist.insert(st, 0);
        let mut Q = VecDeque::new();
        Q.push_back((st, vec![]));
        while let Some((pos, actions)) = Q.pop_front() {
            for &(dir, nxt) in input.legal_actions[pos].iter() {
                if !dist.contains_key(&nxt) || dist[&pos] + 1 < dist[&nxt] {
                    let mut nxt_actions = actions.clone();
                    nxt_actions.push(dir);
                    if different[nxt] == search {
                        different[nxt] = 0;
                        return nxt_actions;
                    }
                    dist.insert(nxt, dist[&pos] + 1);
                    Q.push_back((nxt, nxt_actions));
                }
            }
        }
        vec![]
    }
    fn get_actions(&self, input: &Input, st: Coord, end: Coord) -> Vec<usize> {
        let mut dist: FxHashMap<Coord, usize> = FxHashMap::default();
        dist.insert(st, 0);
        let mut Q = VecDeque::new();
        Q.push_back((st, vec![]));
        while let Some((pos, actions)) = Q.pop_front() {
            for &(dir, nxt) in input.legal_actions[pos].iter() {
                if !dist.contains_key(&nxt) || dist[&pos] + 1 < dist[&nxt] {
                    let mut nxt_actions = actions.clone();
                    nxt_actions.push(dir);
                    if nxt == end {
                        return nxt_actions;
                    }
                    dist.insert(nxt, dist[&pos] + 1);
                    Q.push_back((nxt, nxt_actions));
                }
            }
        }
        vec![]
    }
    #[fastout]
    fn output(&mut self) {
        self.actions.push(DIRS_MAP[&'.']);
        self.actions.push(DIRS_MAP[&'.']);
        self.actions.truncate(3 * 4 * self.n2);
        println!(
            "{} {} {} {}",
            self.init_pos1.row, self.init_pos1.col, self.init_pos2.row, self.init_pos2.col
        );
        // ターン毎にスワップ、高橋君移動、青木移動のアクションを同時に保存できないので、
        // タプルは使用せずに、1次元配列に保存した。
        // mod3=0: スワップ
        // mod3=1: 高橋君移動
        // mod3=2: 青木君移動
        let mut i = 0;
        while i < self.actions.len() {
            let is_swap = self.actions[i];
            let dir1 = self.actions[i + 1];
            let dir2 = self.actions[i + 2];
            println!("{} {} {}", is_swap, DIRS[dir1], DIRS[dir2]);
            i += 3;
        }
    }
}

#[derive(Debug, Clone, Default)]
struct AnnealingState {
    board: DynamicMap2d<i64>,
    cost: i64,
}

impl AnnealingState {
    fn new(board: DynamicMap2d<i64>, input: &Input) -> AnnealingState {
        let cost = calc_cost(&board, input);
        AnnealingState { board, cost }
    }
    fn swap(&mut self, pos1: Coord, pos2: Coord) {
        let tmp = self.board[pos1];
        self.board[pos1] = self.board[pos2];
        self.board[pos2] = tmp;
    }
    fn calc_diff_cost(&self, pos1: Coord, pos2: Coord, input: &Input) -> i64 {
        // スワップする周辺だけ差分更新
        let mut before = 0;
        for nxt in input.legal_actions[pos1].iter() {
            before += (self.board[pos1] - self.board[nxt.1]).pow(2);
        }
        for nxt in input.legal_actions[pos2].iter() {
            before += (self.board[pos2] - self.board[nxt.1]).pow(2);
        }
        let mut after = 0;
        for nxt in input.legal_actions[pos1].iter() {
            if nxt.1 == pos2 {
                after += (self.board[pos2] - self.board[pos1]).pow(2);
            } else {
                after += (self.board[pos2] - self.board[nxt.1]).pow(2);
            }
        }
        for nxt in input.legal_actions[pos2].iter() {
            if nxt.1 == pos1 {
                after += (self.board[pos1] - self.board[pos2]).pow(2);
            } else {
                after += (self.board[pos1] - self.board[nxt.1]).pow(2);
            }
        }
        after - before
    }
}

const DIRS: [char; 5] = ['U', 'D', 'L', 'R', '.'];
const DIJ: [(usize, usize); 5] = [(!0, 0), (1, 0), (0, !0), (0, 1), (0, 0)];
const DIJ_DIFF: [CoordDiff; 5] = [
    CoordDiff::new(!0, 0),
    CoordDiff::new(1, 0),
    CoordDiff::new(0, !0),
    CoordDiff::new(0, 1),
    CoordDiff::new(0, 0),
];
const DIRS_REVERSE: [usize; 5] = [1, 0, 3, 2, 4];

lazy_static::lazy_static! {
    static ref DIRS_MAP: HashMap<char, usize> = {
        let mut mp = HashMap::new();
        for (i,dir) in DIRS.iter().enumerate() {
            mp.insert(*dir, i);
        }
        mp
    };
}

pub struct Input {
    t: usize,
    n: usize,
    n2: usize,
    cost: i64,
    board: DynamicMap2d<i64>,
    legal_actions: DynamicMap2d<Vec<(usize, Coord)>>,
    dist: DynamicMap2d<DynamicMap2d<i32>>,
    vs: Vec<Vec<char>>,
    hs: Vec<Vec<char>>,
}

pub struct Output {
    init_pos1: Coord,
    init_pos2: Coord,
    actions: Vec<(usize, usize, usize)>,
}

fn read_input() -> Input {
    input! {
        t: usize,
        n: usize,
        vs: [Chars; n],
        hs: [Chars; n - 1],
        board2: [[i64; n]; n]
    }

    let mut board = DynamicMap2d::new_with(0, n);
    let mut legal_actions = DynamicMap2d::new_with(vec![], n);
    let mut cost = 0;

    for i in 0..n {
        for j in 0..n {
            let coord = Coord::new(i, j);
            let coord_down = Coord::new(i + 1, j);
            let coord_right = Coord::new(i, j + 1);

            board[coord] = board2[i][j];

            if i + 1 < n && hs[i][j] == '0' {
                legal_actions[coord].push((DIRS_MAP[&'D'], coord_down));
                legal_actions[coord_down].push((DIRS_MAP[&'U'], coord));
                cost += (board2[i][j] - board2[i + 1][j]).pow(2);
            }
            if j + 1 < n && vs[i][j] == '0' {
                legal_actions[coord].push((DIRS_MAP[&'R'], coord_right));
                legal_actions[coord_right].push((DIRS_MAP[&'L'], coord));
                cost += (board2[i][j] - board2[i][j + 1]).pow(2);
            }
        }
    }

    let INF = 1_i32 << 30;
    let mut dist = DynamicMap2d::new_with(DynamicMap2d::new_with(INF, n), n);
    if t != 19 {
        for i in 0..n {
            for j in 0..n {
                let st = Coord::new(i, j);
                dist[st][st] = 0;
                let mut Q = VecDeque::new();
                Q.push_back(st);
                while let Some(pos) = Q.pop_front() {
                    for &(_, nxt) in legal_actions[pos].iter() {
                        if dist[st][pos] + 1 < dist[st][nxt] {
                            dist[st][nxt] = dist[st][pos] + 1;
                            Q.push_back(nxt);
                        }
                    }
                }
            }
        }
    }

    Input {
        t,
        n,
        n2: n * n,
        cost,
        board,
        legal_actions,
        dist,
        vs,
        hs,
    }
}

#[derive(Debug, Clone)]
pub struct TimeKeeper {
    start_time: std::time::Instant,
    time_threshold: f64,
}

impl TimeKeeper {
    fn new(time_threshold: f64) -> Self {
        TimeKeeper {
            start_time: std::time::Instant::now(),
            time_threshold,
        }
    }
    #[inline]
    fn isTimeOver(&self) -> bool {
        let elapsed_time = self.start_time.elapsed().as_nanos() as f64 * 1e-9;
        #[cfg(feature = "local")]
        {
            elapsed_time * 0.55 >= self.time_threshold
        }
        #[cfg(not(feature = "local"))]
        {
            elapsed_time >= self.time_threshold
        }
    }
    #[inline]
    pub fn get_time(&self) -> f64 {
        let elapsed_time = self.start_time.elapsed().as_nanos() as f64 * 1e-9;
        #[cfg(feature = "local")]
        {
            elapsed_time * 0.55
        }
        #[cfg(not(feature = "local"))]
        {
            elapsed_time
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Default)]
pub struct Coord {
    row: usize,
    col: usize,
}

impl Coord {
    pub fn new(row: usize, col: usize) -> Self {
        Self { row, col }
    }
    pub fn in_map(&self, height: usize, width: usize) -> bool {
        self.row < height && self.col < width
    }
    pub fn to_index(&self, width: usize) -> CoordIndex {
        CoordIndex(self.row * width + self.col)
    }
}

impl std::ops::Add<CoordDiff> for Coord {
    type Output = Coord;
    fn add(self, rhs: CoordDiff) -> Self::Output {
        Coord::new(
            self.row.wrapping_add_signed(rhs.dr),
            self.col.wrapping_add_signed(rhs.dc),
        )
    }
}

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct CoordDiff {
    dr: isize,
    dc: isize,
}

impl CoordDiff {
    pub const fn new(dr: isize, dc: isize) -> Self {
        Self { dr, dc }
    }
}

pub const ADJ: [CoordDiff; 4] = [
    CoordDiff::new(1, 0),
    CoordDiff::new(!0, 0),
    CoordDiff::new(0, 1),
    CoordDiff::new(0, !0),
];

pub struct CoordIndex(pub usize);

impl CoordIndex {
    pub fn new(index: usize) -> Self {
        Self(index)
    }
    pub fn to_coord(&self, width: usize) -> Coord {
        Coord {
            row: self.0 / width,
            col: self.0 % width,
        }
    }
}

#[derive(Debug, Clone, Default)]
pub struct DynamicMap2d<T> {
    pub size: usize,
    map: Vec<T>,
}

impl<T> DynamicMap2d<T> {
    pub fn new(map: Vec<T>, size: usize) -> Self {
        assert_eq!(size * size, map.len());
        Self { size, map }
    }
}

impl<T: Clone> DynamicMap2d<T> {
    pub fn new_with(v: T, size: usize) -> Self {
        let map = vec![v; size * size];
        Self::new(map, size)
    }
    pub fn to_2d_vec(&self) -> Vec<Vec<T>> {
        let mut ret = vec![vec![]; self.size];
        for i in 0..self.map.len() {
            let row = i / self.size;
            ret[row].push(self.map[i].clone());
        }
        ret
    }
}

impl<T> std::ops::Index<Coord> for DynamicMap2d<T> {
    type Output = T;

    #[inline]
    fn index(&self, coordinate: Coord) -> &Self::Output {
        &self[coordinate.to_index(self.size)]
    }
}

impl<T> std::ops::IndexMut<Coord> for DynamicMap2d<T> {
    #[inline]
    fn index_mut(&mut self, coordinate: Coord) -> &mut Self::Output {
        let size = self.size;
        &mut self[coordinate.to_index(size)]
    }
}

impl<T> std::ops::Index<CoordIndex> for DynamicMap2d<T> {
    type Output = T;

    fn index(&self, index: CoordIndex) -> &Self::Output {
        unsafe { self.map.get_unchecked(index.0) }
    }
}

impl<T> std::ops::IndexMut<CoordIndex> for DynamicMap2d<T> {
    #[inline]
    fn index_mut(&mut self, index: CoordIndex) -> &mut Self::Output {
        unsafe { self.map.get_unchecked_mut(index.0) }
    }
}

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

mod tsp {

    use super::*;
    use rand_pcg::Pcg64Mcg;
    type C = i32;

    pub fn compute_cost(g: &[Vec<C>], ps: &Vec<usize>) -> C {
        let mut tmp = 0;
        for i in 0..ps.len() - 1 {
            tmp += g[ps[i]][ps[i + 1]];
        }
        tmp
    }

    pub fn greedy(g: &Vec<Vec<C>>) -> Vec<usize> {
        let mut ps = vec![0];
        let n = g.len();
        let mut used = vec![false; n];
        used[0] = true;
        for i in 0..n - 1 {
            let mut to = !0;
            let mut cost = C::max_value();
            for j in 0..n {
                if !used[j] && cost.setmin(g[i][j]) {
                    to = j;
                }
            }
            used[to] = true;
            ps.push(to);
        }
        ps.push(0);
        ps
    }

    // mv: (i, dir)
    pub fn apply_move(tour: &mut [usize], idx: &mut [usize], mv: &[(usize, usize)]) {
        let k = mv.len();
        let mut ids: Vec<_> = (0..k).collect();
        ids.sort_by_key(|&i| mv[i].0);
        let mut order = vec![0; k];
        for i in 0..k {
            order[ids[i]] = i;
        }
        let mut tour2 = Vec::with_capacity(mv[ids[k - 1]].0 - mv[ids[0]].0);
        let mut i = ids[0];
        let mut dir = 0;
        loop {
            let (j, rev) = if dir == mv[i].1 {
                ((i + 1) % k, 0)
            } else {
                ((i + k - 1) % k, 1)
            };
            if mv[j].1 == rev {
                if order[j] == k - 1 {
                    break;
                } else {
                    i = ids[order[j] + 1];
                    dir = 0;
                    tour2.extend_from_slice(&tour[mv[j].0 + 1..mv[i].0 + 1]);
                }
            } else {
                i = ids[order[j] - 1];
                dir = 1;
                tour2.extend(tour[mv[i].0 + 1..mv[j].0 + 1].iter().rev().cloned());
            }
        }
        assert_eq!(tour2.len(), mv[ids[k - 1]].0 - mv[ids[0]].0);
        tour[mv[ids[0]].0 + 1..mv[ids[k - 1]].0 + 1].copy_from_slice(&tour2);
        for i in mv[ids[0]].0 + 1..mv[ids[k - 1]].0 + 1 {
            idx[tour[i]] = i;
        }
    }

    pub const FEASIBLE3: [bool; 64] = [
        false, false, false, true, false, true, true, true, true, true, true, false, true, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        true, false, true, true, true, true, true, true, false, true, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, true, false, true,
        true, true, true, true, true, false, true, false, false, false,
    ];

    pub fn solve(
        g: &Vec<Vec<C>>,
        qs: &Vec<usize>,
        until: f64,
        rng: &mut Pcg64Mcg,
        time_keeper: &TimeKeeper,
    ) -> Vec<usize> {
        let n = g.len();
        let mut f = vec![vec![]; n];
        for i in 0..n {
            for j in 0..n {
                if i != j {
                    f[i].push((g[i][j], j));
                }
            }
            f[i].sort_by(|&(a, _), &(b, _)| a.partial_cmp(&b).unwrap());
        }
        let mut ps = qs.clone();
        let mut idx = vec![!0; n];
        let (mut min, mut min_ps) = (compute_cost(g, qs), ps.clone());
        while time_keeper.get_time() < until {
            let mut cost = compute_cost(g, &ps);
            for p in 0..n {
                idx[ps[p]] = p;
            }
            loop {
                let mut ok = false;
                for i in 0..n {
                    for di in 0..2 {
                        'loop_ij: for &(ij, vj) in &f[ps[i + di]] {
                            if g[ps[i]][ps[i + 1]] - ij <= 0 {
                                break;
                            }
                            for dj in 0..2 {
                                let j = if idx[vj] == 0 && dj == 0 {
                                    n - 1
                                } else {
                                    idx[vj] - 1 + dj
                                };
                                let gain = g[ps[i]][ps[i + 1]] - ij + g[ps[j]][ps[j + 1]];
                                // 2-opt
                                if di != dj && gain - g[ps[j + dj]][ps[i + 1 - di]] > 0 {
                                    cost -= gain - g[ps[j + dj]][ps[i + 1 - di]];
                                    apply_move(&mut ps, &mut idx, &[(i, di), (j, dj)]);
                                    ok = true;
                                    break 'loop_ij;
                                }
                                // 3-opt
                                for &(jk, vk) in &f[ps[j + dj]] {
                                    if gain - jk <= 0 {
                                        break;
                                    }
                                    for dk in 0..2 {
                                        let k = if idx[vk] == 0 && dk == 0 {
                                            n - 1
                                        } else {
                                            idx[vk] - 1 + dk
                                        };
                                        if i == k || j == k {
                                            continue;
                                        }
                                        let gain = gain - jk + g[ps[k]][ps[k + 1]];
                                        if gain - g[ps[k + dk]][ps[i + 1 - di]] > 0 {
                                            let mask = if i < j { 1 << 5 } else { 0 }
                                                | if i < k { 1 << 4 } else { 0 }
                                                | if j < k { 1 << 3 } else { 0 }
                                                | di << 2
                                                | dj << 1
                                                | dk;
                                            if FEASIBLE3[mask] {
                                                cost -= gain - g[ps[k + dk]][ps[i + 1 - di]];
                                                apply_move(
                                                    &mut ps,
                                                    &mut idx,
                                                    &[(i, di), (j, dj), (k, dk)],
                                                );
                                                ok = true;
                                                break 'loop_ij;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if !ok {
                    break;
                }
            }
            if min.setmin(cost) {
                min_ps = ps;
            }
            ps = min_ps.clone();
            if n <= 4 {
                break;
            }
            loop {
                if rng.gen_range(0..2) == 0 {
                    // double bridge
                    let mut is: Vec<_> = (0..4).map(|_| rng.gen_range(0..n)).collect();
                    is.sort();
                    if is[0] == is[1] || is[1] == is[2] || is[2] == is[3] {
                        continue;
                    }
                    ps = ps[0..is[0] + 1]
                        .iter()
                        .chain(ps[is[2] + 1..is[3] + 1].iter())
                        .chain(ps[is[1] + 1..is[2] + 1].iter())
                        .chain(ps[is[0] + 1..is[1] + 1].iter())
                        .chain(ps[is[3] + 1..].iter())
                        .cloned()
                        .collect();
                } else {
                    for _ in 0..6 {
                        loop {
                            let i = rng.gen_range(1..n);
                            let j = rng.gen_range(1..n);
                            if i < j && j - i < n - 2 {
                                ps = ps[0..i]
                                    .iter()
                                    .chain(ps[i..j + 1].iter().rev())
                                    .chain(ps[j + 1..].iter())
                                    .cloned()
                                    .collect();
                                break;
                            }
                        }
                    }
                }
                break;
            }
        }
        min_ps
    }
}
 
#[cfg(feature = "local")]
mod visualizer {
    use crate::{calc_score, Coord, Input, Output, DIJ_DIFF};
    use eframe::egui::{
        show_tooltip_at_pointer, widgets, Align2, CentralPanel, Color32, Context, FontFamily,
        FontId, Id, Key, Pos2, Rect, RichText, Slider, Stroke, TextEdit, Ui,
    };
    use eframe::{run_native, App, CreationContext, Frame, NativeOptions, Storage, Theme};
    use std::time::{Duration, Instant};

    const WIDTH: f32 = 800.0;
    const HEIGHT: f32 = 800.0;
    const VIS_WIDTH: f32 = 600.0;
    const VIS_HEIGHT: f32 = 600.0;
    const OFFSET_WIDTH: f32 = (WIDTH - VIS_WIDTH) / 2.0;
    const OFFSET_HEIGHT: f32 = (HEIGHT - VIS_HEIGHT) / 2.0;
    const SPEED_MIN: usize = 1;
    const SPEED_MAX: usize = 10;

    pub struct Egui {
        input: Input,
        output: Output,
        turn: usize,
        max_turn: usize,
        checked: bool,
        play: bool,
        speed: usize,
        instant: Instant,
        cnt: usize,
    }

    impl Egui {
        fn new(input: Input, output: Output, max_turn: usize) -> Self {
            Egui {
                input,
                output,
                turn: max_turn,
                max_turn,
                checked: true,
                play: false,
                speed: 5,
                instant: Instant::now(),
                cnt: 0,
            }
        }
    }

    impl App for Egui {
        fn save(&mut self, _storage: &mut dyn Storage) {}
        fn update(&mut self, ctx: &Context, _frame: &mut Frame) {
            ctx.request_repaint_after(Duration::from_millis(5));
            if self.instant.elapsed() >= Duration::from_millis(10) {
                self.cnt += 1;
                if self.cnt % (SPEED_MIN + SPEED_MAX - self.speed) == 0
                    && self.play
                    && self.turn < self.max_turn
                {
                    self.turn += 1;
                }
                self.instant = Instant::now();
            }

            CentralPanel::default().show(ctx, |ui| {
                let N = self.input.n;
                let d = VIS_WIDTH / N as f32;
                let mut board = self.input.board.clone();
                let mut cost = self.input.cost;
                let mut pos1 = self.output.init_pos1;
                let mut pos2 = self.output.init_pos2;
                if self.turn > 0 {
                    for t in 0..self.turn {
                        let (is_swap, dir1, dir2) = self.output.actions[t];

                        if is_swap == 1 {
                            let mut before = 0;
                            for nxt in self.input.legal_actions[pos1].iter() {
                                before += (board[pos1] - board[nxt.1]).pow(2);
                            }
                            for nxt in self.input.legal_actions[pos2].iter() {
                                before += (board[pos2] - board[nxt.1]).pow(2);
                            }
                            let mut after = 0;
                            for nxt in self.input.legal_actions[pos1].iter() {
                                if nxt.1 == pos2 {
                                    after += (board[pos2] - board[pos1]).pow(2);
                                } else {
                                    after += (board[pos2] - board[nxt.1]).pow(2);
                                }
                            }
                            for nxt in self.input.legal_actions[pos2].iter() {
                                if nxt.1 == pos1 {
                                    after += (board[pos1] - board[pos2]).pow(2);
                                } else {
                                    after += (board[pos1] - board[nxt.1]).pow(2);
                                }
                            }
                            cost += after - before;

                            let tmp = board[pos1];
                            board[pos1] = board[pos2];
                            board[pos2] = tmp;
                        }

                        pos1 = pos1 + DIJ_DIFF[dir1];
                        pos2 = pos2 + DIJ_DIFF[dir2];
                    }
                }
                let score = calc_score(self.input.cost, cost);
                ui.horizontal(|ui| {
                    ui.label(RichText::new(format!("Score: {}", score)).size(20.0));
                    ui.checkbox(&mut self.checked, "Show Number");
                    widgets::global_dark_light_mode_buttons(ui);
                });
                ui.horizontal(|ui| {
                    ui.label(RichText::new("Turn: ").size(20.0));
                    ui.add(Slider::new(&mut self.turn, 0..=self.max_turn));
                });
                ui.horizontal(|ui| {
                    ui.label(RichText::new("Speed: ").size(20.0));
                    ui.add(Slider::new(&mut self.speed, SPEED_MIN..=SPEED_MAX));
                });

                if ctx.input().key_released(Key::Space) {
                    self.play = !self.play;
                };
                if self.turn == self.max_turn {
                    self.play = false;
                }
                if ctx.input().key_pressed(Key::ArrowRight) && self.turn < self.max_turn {
                    self.turn += 1;
                };
                if ctx.input().key_pressed(Key::ArrowLeft) && self.turn > 0 {
                    self.turn -= 1;
                };

                let hover_pos = ui.input().pointer.hover_pos();
                for i in 0..N {
                    for j in 0..N {
                        let coord = Coord::new(i, j);
                        let pos1 = Pos2 {
                            x: j as f32 * d,
                            y: i as f32 * d,
                        };
                        let pos2 = Pos2 {
                            x: pos1.x + d,
                            y: pos1.y + d,
                        };
                        let rect = rect(
                            ui,
                            pos1,
                            pos2,
                            color32(board[coord] as f32 / self.input.n2 as f32),
                            Color32::WHITE,
                        );
                        if let Some(hover_pos) = hover_pos {
                            if rect.contains(hover_pos) {
                                show_tooltip_at_pointer(ui.ctx(), Id::new("hover tooltip"), |ui| {
                                    ui.label(format!("a[{}, {}] = {}", i, j, board[coord]));
                                });
                            }
                        }
                        if self.checked {
                            let pos = Pos2 {
                                x: pos1.x + d / 2.0,
                                y: pos1.y + d / 2.0,
                            };
                            txt(ui, &board[coord].to_string(), pos, d / 4.0, Color32::BLACK);
                        }
                    }
                }
                partition(ui, &self.input.hs, &self.input.vs, d);
                let pos = Pos2 {
                    x: pos1.col as f32 * d + d / 2.0,
                    y: pos1.row as f32 * d + d / 2.0,
                };
                circle(ui, pos, d / 3.0, Color32::RED, Color32::WHITE);
                let pos = Pos2 {
                    x: pos2.col as f32 * d + d / 2.0,
                    y: pos2.row as f32 * d + d / 2.0,
                };
                circle(ui, pos, d / 3.0, Color32::BLUE, Color32::WHITE);
            });
        }
    }

    pub fn vis(input: Input, output: Output, max_turn: usize) {
        let options = NativeOptions {
            initial_window_size: Some((WIDTH, HEIGHT).into()),
            initial_window_pos: Some(Pos2 { x: 100.0, y: 100.0 }),
            resizable: false,
            default_theme: Theme::Light,
            ..NativeOptions::default()
        };
        let gui = Egui::new(input, output, max_turn);
        run_native("visualizer", options, Box::new(|_cc| Box::new(gui)));
    }

    // 0 <= val <= 1
    pub fn color32(mut val: f32) -> Color32 {
        val = val.min(1.0);
        val = val.max(0.0);
        let (r, g, b) = if val < 0.5 {
            let x = val * 2.0;
            (
                30. * (1.0 - x) + 144. * x,
                144. * (1.0 - x) + 255. * x,
                255. * (1.0 - x) + 30. * x,
            )
        } else {
            let x = val * 2.0 - 1.0;
            (
                144. * (1.0 - x) + 255. * x,
                255. * (1.0 - x) + 30. * x,
                30. * (1.0 - x) + 70. * x,
            )
        };
        Color32::from_rgb(r.round() as u8, g.round() as u8, b.round() as u8)
    }
    pub fn txt(ui: &mut Ui, txt: &str, mut pos: Pos2, size: f32, color: Color32) {
        pos.x += OFFSET_WIDTH;
        pos.y += OFFSET_HEIGHT;
        let anchor = Align2::CENTER_CENTER;
        let font_id = FontId::new(size, FontFamily::Monospace);
        ui.painter().text(pos, anchor, txt, font_id, color);
    }
    pub fn line(ui: &mut Ui, mut pos1: Pos2, mut pos2: Pos2, color: Color32) {
        pos1.x += OFFSET_WIDTH;
        pos2.x += OFFSET_WIDTH;
        pos1.y += OFFSET_HEIGHT;
        pos2.y += OFFSET_HEIGHT;
        let points = [pos1, pos2];
        let stroke = Stroke { width: 3.0, color };
        ui.painter().line_segment(points, stroke);
    }
    #[allow(clippy::too_many_arguments)]
    pub fn dash_line(
        ui: &mut Ui,
        mut pos1: Pos2,
        mut pos2: Pos2,
        dash_length: f32,
        gap_length: f32,
        color: Color32,
    ) {
        pos1.x += OFFSET_WIDTH;
        pos2.x += OFFSET_WIDTH;
        pos1.y += OFFSET_HEIGHT;
        pos2.y += OFFSET_HEIGHT;

        let mut x1 = pos1.x;
        let mut y1 = pos1.y;
        let mut x2 = pos2.x;
        let mut y2 = pos2.y;
        let mut is_swap = false;
        if x1 == x2 {
            std::mem::swap(&mut x1, &mut y1);
            std::mem::swap(&mut x2, &mut y2);
            is_swap = true;
        }

        let a = (y2 - y1) / (x2 - x1);
        let b = y1 - a * x1;

        let f = |x: f32, target_length: f32| -> bool {
            let y = a * x + b;
            let len = ((x - x1).powf(2.0) + (y - y1).powf(2.0)).sqrt();
            len <= target_length
        };

        let mut positions = vec![];
        positions.push((x1, y1));
        let max_length = ((x1 - x2).powf(2.0) + (y1 - y2).powf(2.0)).sqrt();
        let mut cnt = 0;
        let mut target_length = 0.0f32;

        loop {
            if cnt % 2 == 0 {
                target_length += dash_length;
            } else {
                target_length += gap_length;
            }
            if target_length >= max_length {
                break;
            }

            let mut ok = x1;
            let mut ng = x2;
            while (ng - ok).abs() > 1e-3 {
                let m = (ok + ng) / 2.0;
                if f(m, target_length) {
                    ok = m;
                } else {
                    ng = m;
                }
            }

            positions.push((ok, a * ok + b));

            cnt += 1;
        }
        positions.push((x2, y2));
        if positions.len() % 2 == 1 {
            positions.pop();
        }
        if is_swap {
            for (a, b) in &mut positions {
                std::mem::swap(a, b);
            }
        }
        let mut i = 0;
        while i < positions.len() {
            let p1 = Pos2 {
                x: positions[i].0,
                y: positions[i].1,
            };
            let p2 = Pos2 {
                x: positions[i + 1].0,
                y: positions[i + 1].1,
            };
            line(ui, p1, p2, color);
            i += 2;
        }
    }
    pub fn rect(
        ui: &mut Ui,
        mut pos1: Pos2,
        mut pos2: Pos2,
        fill_color: Color32,
        stroke_color: Color32,
    ) -> Rect {
        pos1.x += OFFSET_WIDTH;
        pos2.x += OFFSET_WIDTH;
        pos1.y += OFFSET_HEIGHT;
        pos2.y += OFFSET_HEIGHT;

        let rect = Rect {
            min: pos1,
            max: pos2,
        };
        let rounding = 0.0;
        let stroke = Stroke {
            width: 0.2,
            color: stroke_color,
        };
        ui.painter().rect(rect, rounding, fill_color, stroke);
        rect
    }
    pub fn circle(
        ui: &mut Ui,
        mut center: Pos2,
        radius: f32,
        fill_color: Color32,
        stroke_color: Color32,
    ) {
        center.x += OFFSET_WIDTH;
        center.y += OFFSET_HEIGHT;
        let stroke = Stroke {
            width: 0.2,
            color: stroke_color,
        };
        ui.painter().circle(center, radius, fill_color, stroke);
    }
    pub fn partition(ui: &mut Ui, h: &[Vec<char>], v: &[Vec<char>], size: f32) {
        let H = v.len();
        let W = h[0].len();
        for i in 0..H + 1 {
            for j in 0..W {
                // Entrance
                // if i == 0 && j == ENTRANCE {
                //     continue;
                // }
                if (i == 0 || i == H) || h[i - 1][j] == '1' {
                    let pos1 = Pos2 {
                        x: j as f32 * size,
                        y: i as f32 * size,
                    };
                    let pos2 = Pos2 {
                        x: pos1.x + size,
                        y: pos1.y,
                    };
                    line(ui, pos1, pos2, Color32::BLACK);
                }
            }
        }
        for j in 0..W + 1 {
            for i in 0..H {
                // Entrance
                // if j == 0 && i == ENTRANCE {
                //     continue;
                // }
                if (j == 0 || j == W) || v[i][j - 1] == '1' {
                    let pos1 = Pos2 {
                        x: j as f32 * size,
                        y: i as f32 * size,
                    };
                    let pos2 = Pos2 {
                        x: pos1.x,
                        y: pos1.y + size,
                    };
                    line(ui, pos1, pos2, Color32::BLACK);
                }
            }
        }
    }
}
